= Spring Boot, Jersey and Lazy Initialization
Jonathan Pearlin
2014-06-03
:jbake-type: post
:jbake-tags: spring,jersey
:jbake-status: published
:source-highlighter: prettify
:linkattrs:
:id: spring_boot_jersey_eager_init
:spring_boot: http://projects.spring.io/spring-boot/[Spring Boot, window="_blank"]
:jax_rs: https://jax-rs-spec.java.net/[JAX-RS, window="_blank"]
:jersey: https://jersey.java.net/[Jersey 2.x, window="_blank"]
:icons: font

It is pretty simple to spin up a micro REST service using {spring_boot} and {jersey}.  In fact, there are various tutorials out there that show how this can be done with very little code/configuration:

* https://github.com/dsyer/spring-boot-jersey[Spring Boot Jersey module, window="_blank"]
* http://geowarin.github.io/spring-boot/jersey/2014/01/31/a-simple-spring-boot-and-jersey-application.html[A Simple Spring Boot and Jersey Application, window="_blank"]

{jersey} also provides a nice https://jersey.java.net/documentation/latest/spring.html[Spring support module, window="_blank"], which makes it easy to register {jersey} resources as Spring components.  The first step
is to create a Spring-based {jersey} resource configuration:

[source,java]
.JerseyConfig.java
----
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.server.spring.SpringComponentProvider;
import org.glassfish.jersey.server.spring.scope.RequestContextFilter;
import org.springframework.stereotype.Component;

@Component
public class JerseyConfig extends ResourceConfig {

    public JerseyConfig() {
        register(MyResource.class);
        register(RequestContextFilter.class);
        register(LoggingFilter.class);
        register(SpringComponentProvider.class);
    }
}
----

Once you have the configuration created (and Spring set up to component scan it at startup up), you also need to create a servlet to register the configuration with {jersey}:

[source,java]
.ApplicationConfig.java
----
import java.io.IOException;

import org.glassfish.jersey.servlet.ServletContainer;
import org.glassfish.jersey.servlet.ServletProperties;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan({"com.test"})
public class ApplicationConfig {

    @Bean
    public ServletRegistrationBean jerseyServlet() {
        final ServletRegistrationBean registration = new ServletRegistrationBean(new ServletContainer(), "/api/*");
        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());
        return registration;
    }
}
----

This is pretty simple, but when you start up the application and then make a call to your REST resource, you may notice that {jersey} is not initialized until this first call:

[source]
----
2014-05-19 12:08:30.062  INFO 8626 --- [lication.main()] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080/http
2014-05-19 12:08:30.065  INFO 8626 --- [lication.main()] com.test.Application        		      : Started Application in 13.461 seconds (JVM running for 21.588)
2014-05-19 12:10:29.363  INFO 8626 --- [lication.main()] o.g.jersey.server.ApplicationHandler     : Initiating Jersey application, version Jersey: 2.7 2014-03-12 18:11:31...
----

This means that the first request to your service incurs the cost of initializing {jersey}.  Luckily, there is a simple fix that will ensure that {jersey} is initialized on startup.  We can add
a call to the `setLoadOnStartup()` method of the `ServletRegistration` instance in our Spring configuration to ensure that {jersey} is initialized upon application start up:

[source,java]
.ApplicationConfig.java
----
import java.io.IOException;

import org.glassfish.jersey.servlet.ServletContainer;
import org.glassfish.jersey.servlet.ServletProperties;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan({"com.test"})
public class ApplicationConfig {

    @Bean
    public ServletRegistrationBean jerseyServlet() {
        final ServletRegistrationBean registration = new ServletRegistrationBean(new ServletContainer(), "/api/*");
        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());
        registration.setLoadOnStartup(1);
        return registration;
    }
}
----

After the change above, the Jersey application is initialized prior to application start:

[source]
----
2014-05-19 12:10:29.363  INFO 8626 --- [lication.main()] o.g.jersey.server.ApplicationHandler     : Initiating Jersey application, version Jersey: 2.7 2014-03-12 18:11:31...
2014-05-19 12:10:30.062  INFO 8626 --- [lication.main()] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080/http
2014-05-19 12:10:30.065  INFO 8626 --- [lication.main()] com.test.Application        		      : Started Application in 13.461 seconds (JVM running for 21.588)
----