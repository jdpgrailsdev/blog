= Execute Functional Tests in a Docker Container with Gradle (Part 1)
Jonathan Pearlin
2014-11-11
:jbake-type: post
:jbake-tags: docker,gradle,groovy,spock
:jbake-status: published
:source-highlighter: prettify
:linkattrs:
:id: functional_tests_gradle_docker
:icons: font
:spring_boot: http://projects.spring.io/spring-boot/[Spring Boot, window="_blank"]
:spring-data-jpa: http://projects.spring.io/spring-data-jpa/[Spring Data JPA, window="_blank"]
:gradle: http://gradle.org[Gradle, window="_blank"]
:spock: https://code.google.com/p/spock/[Spock, window="_blank"]

[source,java]
----
@Repository
public interface BookRepository extends JpaRepository<Book, Long> {

    List<Book> findByIsbn(final String isbn);

}
----

[source,groovy]
----
@ActiveProfiles('test')
@ContextConfiguration(classes=[PersistenceConfiguration], loader=SpringApplicationContextLoader)
class BookRepositoryFunctionalSpec extends Specification {

    @Autowired
    private BookRepository boolRepository

    def cleanup() {
        bookRepository.deleteAll()
    }

    def "test that the correct number of books are found when finding books by ISBN"() {
        setup:
            Book book1 = new Book(title:'A Good Book', author:'Some Guy', isbn:'978-3-16-148410-0')
            Book book2 = new Book(title:'A Good Book, Second Edition', author:'Some Guy', isbn:'978-3-16-148410-1')

            bookRepository.saveAndFlush(book1)
            bookRepository.saveAndFlush(book2)
        when:
            def books = bookRepository.findByIsbn('978-3-16-148410-0')
        then:
            books != null
            books.size() == 1
            books.first() == book1
        when:
            books = bookRepository.findByIsbn('unknown')
        then:
            books != null
            books.size() == 0
    }
----

[source]
----
# test ========================================================================== #
spring:
  profiles: test
  jpa:
    properties:
      hibernate:
        show_sql: "true"
----

[source,groovy]
----
apply plugin: 'groovy'
apply plugin: 'jetty'

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://pdx-artifacts.pdx.vm.datanerd.us:8081/artifactory/repo' }
    }
    dependencies {
        classpath('com.newrelic.gradle.plugins:gradle-shipright-plugin:1.0.1-SNAPSHOT')
    }
}

ext {
    webSourceDir = "$buildDir/www"
    imageName = "${rootProject.name}-functional-tests"
    springVersion = '4.0.7.RELEASE'
}

sourceSets {
    funcTest {
        groovy {
            srcDir file('src/functionalTest/groovy')
        }
    }
}

jettyRun {
    httpPort = System.getenv('PORT') ? System.getenv('PORT') as int : 10201
    contextPath = 'status/check'
    webAppSourceDirectory = file(webSourceDir)
}

dependencies {
    compile project(':main')

    testCompile 'junit:junit:4.11'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'
    testCompile "org.springframework:spring-test:${springVersion}"

    funcTestCompile sourceSets.main.output
    funcTestCompile configurations.testCompile
    funcTestRuntime configurations.testRuntime
}

task funcTest(type: Test, group:'Verification', description: 'Runs the functional tests.') {
    testClassesDir = sourceSets.funcTest.output.classesDir
    classpath = sourceSets.funcTest.runtimeClasspath
    jvmArgs = ['-Duser.timezone=UTC']
}

task collectTestResults(type:Tar, group:'Verification', description: 'Generates a tarball of the collected test report.') {
    archiveName = 'functional-test-reports.tar'
    from("$buildDir/reports/tests") {
        into(webSourceDir)
    }
}

task execute(dependsOn:['funcTest', 'collectTestResults', 'jettyRun'])
----

[source]
----
# Force Gradle to download all of its dependencies at image build time!
RUN echo "Resolving Gradle dependencies for functional tests..."
RUN cd /var/tests && /var/test/bin/dependencies.sh > /var/tests/dependencies.txt
RUN echo "Dependency resolution completed.  See /var/tests/dependencies.txt for more details."

CMD ["/var/tests/functional-tests.sh"]
----

The `dependencies.sh` is a simple bash script that runs the following command:  /var/tests/gradlew --refresh-dependencies dependencies

The Dockerfile automatically run another script, which invokes the functional tests.  That script does the following:  /var/tests/gradlew --offline :test:functional:clean :test:functional:execute

