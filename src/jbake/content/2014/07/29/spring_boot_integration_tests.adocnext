= Leveraging Spring Boot Starters in Unit/Integration Tests
Jonathan Pearlin
2014-07-29
:jbake-type: post
:jbake-tags: spring
:jbake-status: published
:source-highlighter: prettify
:linkattrs:
:id: spring_boot_testing
:icons: font
:spring_boot: http://projects.spring.io/spring-boot/[Spring Boot, window="_blank"]
:spring_framework: http://projects.spring.io/spring-framework/[Spring Framework, window="_blank"]
:spring_junit: http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#testcontext-junit4-runner[JUnit integration, window="_blank"]

The {spring_framework} provides a nice {spring_junit}, which allows one to write integration-style tests that make use of a fully loaded and configured Spring context.
This is great help when writing an integration test suite to test something like a database, as you do not need to manually create all the code required to interact
with the database.  Instead, you can rely upon Spring to configure the beans just as it would at runtime.  Recently, I found myself in a situation where I needed to
write just such an integration test, though this time for an application that uses {spring_boot}.  You do not need to do anything special to leverage the {spring_junit}
integration, as that is provided by the https://github.com/spring-projects/spring-framework/tree/master/spring-test[Spring Test module, window="_blank"] of the {spring_framework}
project.  What you do not get by default, is all of the auto-configuration magic that {spring_boot} provides, including logging configuration.  With the release of {spring_boot}
1.1.4, it is now possible to add the following to your `application.properties` or `application.yml` configuration file to control the logging output:

[source]
----
logging.level.org.springframework: ERROR
----

Additionally, I wanted to be able to turn on SQL logging when executing my integration tests via the {spring_boot} JPA configuration:

[source]
----
spring.jpa.properties.hibernate.show_sql: true
----

However, simply using the {spring_junit} does not cause {spring_boot} to load the configuration or perform any of the auto-configuration that it does when running the application.
To enable {spring_boot} to work its magic when running unit/integration tests that load a context, the first step is to include the `spring-boot-starter-test` dependency:

[source,groovy]
----
testCompile 'org.springframework.boot:spring-boot-starter-test:1.1.4.RELEASE'
----

The presence of this dependency will cause {spring_boot} to perform all the normal start-up auto-configuration that occurs when running the application.  However, in order for this to
actually happen, you need to tell JUnit to use the `SpringApplicationContextLoader` when loading the context:

[source,java]
----
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={TestConfiguration.class}, loader = SpringApplicationContextLoader.class)
public class DatabaseIntegrationTests {
    ...
}
----

When the {spring_framework} loads the test configuration, it does so via {spring_boot}'s `SpringApplicationContextLoader`, which is provided by the `spring-boot-starter-test`.  This
context loader supports all of the auto-configuration magic that we know and love in {spring_boot}.  Now, you can adjust logging levels, provide configuration and have your contexts
make use of the {spring_boot} auto-configuration annotations as part of your test suite!
