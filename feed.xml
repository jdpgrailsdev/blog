<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Tue, 27 Jan 2015 07:46:28 -0800</pubDate>
        <lastBuildDate>Tue, 27 Jan 2015 07:46:28 -0800</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Custom PostgreSQL Hstore Data Type with Spring, JPA and Hibernate</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/27/spring_jpa_postgresql_hstore.html</link>
            <pubDate>Tue, 27 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/27/spring_jpa_postgresql_hstore.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting &lt;a href=&quot;http://www.postgresql.org&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; version 9.0, the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt; data type was introduced, which allows for the storing of arbitrary sets of key/value pairs within a single column.  This
data type can be leveraged for a bunch of different situations, such as for storing custom/random attributes, semi-structured data or in any scenario where the number and
type of columns associated with an entity stored in a table varies.  As with most new/database vendor-specific features, support for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt; data type does not exist
as a first-level data type in the &lt;a href=&quot;http://www.postgresql.org&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; dialect provided by &lt;a href=&quot;https://hibernate.org&quot; target=&quot;_blank&quot;&gt;Hibernate&lt;/a&gt;.  However, both JPA and &lt;a href=&quot;https://hibernate.org&quot; target=&quot;_blank&quot;&gt;Hibernate&lt;/a&gt; provide mechanisms that allow you to customize the
way in which data stored in an entity is prepared for insertion into a database table and vice-versa.  The &lt;a href=&quot;http://en.wikibooks.org/wiki/Java_Persistence/Basic_Attributes#Converters_.28JPA_2.1.29&quot; target=&quot;_blank&quot;&gt;JPA Attribute Converter&lt;/a&gt; specification allows you to provide
a custom &lt;code&gt;AttributeConverter&lt;/code&gt; implementation that governs how data stored in a field of an entity gets converted for storage in the database and how to convert the column
data back into a Java type.  Normally, this would be how you would implement support for an un-supported data type.  However, due to an &lt;a href=&quot;https://hibernate.atlassian.net/browse/HHH-8804&quot; target=&quot;_blank&quot;&gt;Hibernate issue with Converters and parameterized types&lt;/a&gt;, this won&amp;#8217;t work
for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt;, unless you want to map it to a Java &lt;code&gt;String&lt;/code&gt; type instead of a Java &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; type, which makes more sense for an arbitrary key/value store.
The solution?  Leverage &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/3.6/reference/en-US/html/types.html#types-custom-ut&quot; target=&quot;_blank&quot;&gt;Hibernate&amp;#8217;s Custom Types&lt;/a&gt; support!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.example.jpa.support;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.hibernate.HibernateException;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.usertype.UserType;

/**
 * Custom Hibernate {@link UserType} used to convert between a {@link Map}
 * and PostgreSQL {@code hstore} data type.
 */
public class HstoreUserType implements UserType {

    /**
     * PostgreSQL {@code hstore} field separator token.
     */
    private static final String HSTORE_SEPARATOR_TOKEN = &quot;=&amp;gt;&quot;;

    /**
     * {@link Pattern} used to find and split {@code hstore} entries.
     */
    private static final Pattern HSTORE_ENTRY_PATTERN = Pattern.compile(String.format(&quot;\&quot;(.*)\&quot;%s\&quot;(.*)\&quot;&quot;, HSTORE_SEPARATOR_TOKEN));

    /**
     * The PostgreSQL value for the {@code hstore} data type.
     */
    public static final int HSTORE_TYPE = 1111;

    @Override
    public int[] sqlTypes() {
        return new int[] { HSTORE_TYPE };
    }

    @SuppressWarnings(&quot;rawtypes&quot;)
    @Override
    public Class returnedClass() {
        return Map.class;
    }

    @Override
    public boolean equals(final Object x, final Object y) throws HibernateException {
        return x.equals(y);
    }

    @Override
    public int hashCode(final Object x) throws HibernateException {
        return x.hashCode();
    }

    @Override
    public Object nullSafeGet(final ResultSet rs, final String[] names,
            final SessionImplementor session, final Object owner)
            throws HibernateException, SQLException {
        return convertToEntityAttribute(rs.getString(names[0]));
    }

    @SuppressWarnings(&quot;unchecked&quot;)
    @Override
    public void nullSafeSet(final PreparedStatement st, final Object value, final int index,
            final SessionImplementor session) throws HibernateException, SQLException {
        st.setObject(index, convertToDatabaseColumn((Map&amp;lt;String,Object&amp;gt;)value), HSTORE_TYPE);

    }

    @SuppressWarnings(&quot;unchecked&quot;)
    @Override
    public Object deepCopy(final Object value) throws HibernateException {
        return new HashMap&amp;lt;String,Object&amp;gt;(((Map&amp;lt;String,Object&amp;gt;)value));
    }

    @Override
    public boolean isMutable() {
        return true;
    }

    @Override
    public Serializable disassemble(final Object value) throws HibernateException {
        return (Serializable) value;
    }

    @Override
    public Object assemble(final Serializable cached, final Object owner)
            throws HibernateException {
        return cached;
    }

    @Override
    public Object replace(final Object original, final Object target, final Object owner)
            throws HibernateException {
        return original;
    }


    private String convertToDatabaseColumn(final Map&amp;lt;String, Object&amp;gt; attribute) {
        final StringBuilder builder = new StringBuilder();
        for (final Map.Entry&amp;lt;String, Object&amp;gt; entry : attribute.entrySet()) {
            if(builder.length() &amp;gt; 1) {
                builder.append(&quot;, &quot;);
            }
            builder.append(&quot;\&quot;&quot;);
            builder.append(entry.getKey());
            builder.append(&quot;\&quot;&quot;);
            builder.append(HSTORE_SEPARATOR_TOKEN);
            builder.append(&quot;\&quot;&quot;);
            builder.append(entry.getValue().toString());
            builder.append(&quot;\&quot;&quot;);
        }
        return builder.toString();
    }

    private Map&amp;lt;String, Object&amp;gt; convertToEntityAttribute(final String dbData) {
        final Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;String, Object&amp;gt;();
        final StringTokenizer tokenizer = new StringTokenizer(dbData, &quot;,&quot;);

        while(tokenizer.hasMoreTokens()) {
            final Matcher matcher = HSTORE_ENTRY_PATTERN.matcher(tokenizer.nextToken().trim());
            if(matcher.find()) {
                data.put(matcher.group(1), matcher.group(2));
            }
        }

        return data;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example above implements the &lt;a href=&quot;https://hibernate.org&quot; target=&quot;_blank&quot;&gt;Hibernate&lt;/a&gt; &lt;code&gt;UserType&lt;/code&gt; interface and provides methods (&lt;code&gt;nullSafeGet&lt;/code&gt; and &lt;code&gt;nullSafeSet&lt;/code&gt;) to handle the conversion.  It also provides the appropriate
data type value for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt; (1111).  Now that you have a custom &lt;code&gt;UserType&lt;/code&gt; implementation for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt;, the next step is to annotate your entity class to instruct JPA to
use the custom type during mapping:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.example.jpa.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import com.example.jpa.support.HstoreUserType;

@Entity
@Table(name = &quot;books&quot;)
@TypeDef(name = &quot;hstore&quot;, typeClass = HstoreUserType.class)
public class BookEntity {

    @Column(name=&quot;metadata&quot;)
    @Type(type=&quot;hstore&quot;)
    private Map&amp;lt;String,Object&amp;gt; metadata;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;TypeDef&lt;/code&gt; is given a name so that it can be referenced when applied to the field via the &lt;code&gt;Type&lt;/code&gt; annotation.  Now, when data is persisted or retrieved, our custom &lt;code&gt;UserType&lt;/code&gt; implementation
will be invoked to handle the data.  It is also worth noting that the &lt;a href=&quot;http://www.postgresql.org&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; JDBC driver library does come with an &lt;code&gt;HStoreConverter&lt;/code&gt; class with static methods that could be leveraged from
inside the custom &lt;code&gt;UserType&lt;/code&gt; to handle the conversion to/from a &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and vice versa.  However, I would not recommend an implementation that depends on an internal
class from the JDBC driver, as it may cause compatibility issues if you upgrade.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Rollbacks with Spring Transactions</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/20/spring_transactions_rollback.html</link>
            <pubDate>Tue, 20 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/20/spring_transactions_rollback.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, no rollback handling rules are defined if you simply add &lt;code&gt;@Transactional&lt;/code&gt; to your method.  In order for the rollback to actually be executed upon failure,
you must define one or more exceptions that you want to trigger a rollback via the &lt;code&gt;rollbackFor&lt;/code&gt; or &lt;code&gt;rollbackForClassName&lt;/code&gt; attributes of the annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Transactional(rollbackForClassName={&quot;Exception&quot;})
public void save(final Book book) {
    Author author = new Author(book.getAuthorName());
    authorRepository.saveAndFlush(author);
    bookRepository.saveAndFlush(book);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example above, the &lt;code&gt;@Transactional&lt;/code&gt; annotation makes use of the &lt;code&gt;rollbackForClassName&lt;/code&gt; attribute value to force
a database rollback if any exception of type &lt;code&gt;java.lang.Exception&lt;/code&gt; is thrown by the method (e.g. if any exception happens,
roll both save operations back).  The &lt;code&gt;rollbackForClassName&lt;/code&gt; attribute actually provides a little more flexibility than the
&lt;code&gt;rollbackFor&lt;/code&gt; attribute value.  From the &lt;code&gt;@Transactional&lt;/code&gt; JavaDoc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider carefully how specific the pattern is, and whether
to include package information (which isn&amp;#8217;t mandatory). For example,
&quot;Exception&quot; will match nearly anything, and will probably hide other rules.
&quot;java.lang.Exception&quot; would be correct if &quot;Exception&quot; was meant to define
a rule for all checked exceptions. With more unusual java.lang.Exception
names such as &quot;BaseBusinessException&quot; there is no need to use a FQN.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; org.springframework.transaction.annotation.Transactional#rollbackForClassName() JavaDoc
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, it gives you the ability to provide rules to match certain sub-strings of exception
types to better control your rollback logic.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Check Jenkins Job Status via REST API</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/13/jenkins_check_job_status.html</link>
            <pubDate>Wed, 7 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/13/jenkins_check_job_status.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a ton of &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; plugins out there that let you control when a job should run based on the status of
other builds.  However, plugins typically become out of date pretty quickly.  If you don&amp;#8217;t want to have to play
the plugin update game, you can use a little bash magic to leverage the &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; REST API to check the status
of other jobs before running your builds.  Let&amp;#8217;s assume that you have a job named &lt;code&gt;other-job&lt;/code&gt; that must be in
a success state in order for another job to execute.  You can check the status of the &lt;code&gt;other-job&lt;/code&gt; by using
the &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; REST API as part of an executed shell in the job&amp;#8217;s configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;job_status=`curl https://jenkins/view/job/other-job/lastBuild/api/json | grep &quot;\&quot;result\&quot;:\&quot;SUCCESS\&quot;&quot;`

if [ -n &quot;$job_status&quot; ]
then
    # Run your script commands here
else
  echo &quot;BUILD FAILURE: Other build is unsuccessful or status could not be obtained.&quot;
  exit 1
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; block of this other job could even do something like invoke another build that has a parameterized configuration to run your
actual build via the REST API.  This would allow you to have the job with the configuration above check the status of &lt;code&gt;other-job&lt;/code&gt; first
and then kick of a third job that actual performs the build, but only if the first job is successful, all without
installing any additional plugins.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Using CSS Parser and JSoup to Inline Styles for Web Mail</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/06/email_inline_style_jsoup_cssparser.html</link>
            <pubDate>Tue, 6 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/06/email_inline_style_jsoup_cssparser.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of an on-going project, we had a requirement to send pretty (CSS-ified) e-mails to communicate status.  Sending HTML-based e-mails from Java is pretty easy.  There
are a ton of templating engines out there that can be used to generate HTML.  However, what most people fail to realize is that most web mail providers (e.g. Gmail, Yahoo!, etc) handle a limited
subset of standard CSS.  You can find out what is supported by looking at &lt;a href=&quot;https://www.campaignmonitor.com/css/&quot; target=&quot;_blank&quot;&gt;Campaign Monitor CSS Support&lt;/a&gt;.  The first thing you might notice is that almost all of the web mail providers
do not support CSS classes.  They do, however, support inline style declarations.  Being a good developer, you know that you want to keep all of your CSS in style sheets so
that you do not have to find and replace styles in multiple templates/files.  This poses a problem if the clients can only support inline styles.  The solution?  A combination
of &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; and &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; to load and convert a style sheet into inline style declarations.  The solution in this blog post uses &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; to parse a CSS style sheet file
loaded from the classpath into a set of &lt;code&gt;CSSSytleRule&lt;/code&gt; objects.  It then uses &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; to walk the DOM in the HTML and find elements that match the rules present in the parsed style sheet.  To start, you
need to include the &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; and &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;compile &apos;org.jsoup:jsoup:1.8.1&apos;
compile &apos;net.sourceforge.cssparser:cssparser:0.9.14&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, create the &lt;code&gt;CSSOMParser&lt;/code&gt; used to parse the CSS style sheet and load the style sheet from the classpath:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.steadystate.css.parser.CSSOMParser;

import org.w3c.dom.css.CSSStyleSheet;

...

CSSOMParser parser = new CSSOMParser();
CSSStyleSheet stylesheet = parser.parseStyleSheet(new InputSource(new InputStreamReader(getClass().getResourceAsStream(&quot;/css/styles.css&quot;))), null, null);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our style sheet loaded and parsed, we can use the following code to walk the DOM and add inline style declarations
to elements that match the rules contained in the style sheet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;final Document document = Jsoup.parse(originalHtml);
final CSSRuleList rules = stylesheet.getCssRules();
final Map&amp;lt;Element, Map&amp;lt;String, String&amp;gt;&amp;gt; elementStyles = new HashMap&amp;lt;&amp;gt;();

/*
 * For each rule in the style sheet, find all HTML elements that match
 * based on its selector and store the style attributes in the map with
 * the selected element as the key.
 */
for (int i = 0; i &amp;lt; rules.getLength(); i++) {
    final CSSRule rule = rules.item(i);
    if (rule instanceof CSSStyleRule) {
        final CSSStyleRule styleRule = (CSSStyleRule) rule;
        final String selector = styleRule.getSelectorText();

        // Ignore pseudo classes, as JSoup&apos;s selector cannot handle
        // them.
        if (!selector.contains(&quot;:&quot;)) {
            final Elements selectedElements = document.select(selector);
            for (final Element selected : selectedElements) {
                if (!elementStyles.containsKey(selected)) {
                    elementStyles.put(selected, new LinkedHashMap&amp;lt;String, String&amp;gt;());
                }

                final CSSStyleDeclaration styleDeclaration = styleRule.getStyle();

                for (int j = 0; j &amp;lt; styleDeclaration.getLength(); j++) {
                    final String propertyName = styleDeclaration.item(j);
                    final String propertyValue = styleDeclaration.getPropertyValue(propertyName);
                    final Map&amp;lt;String, String&amp;gt; elementStyle = elementStyles.get(selected);
                    elementStyle.put(propertyName, propertyValue);
                }

            }
        }
    }
}

/*
 * Apply the style attributes to each element and remove the &quot;class&quot;
 * attribute.
 */
for (final Map.Entry&amp;lt;Element, Map&amp;lt;String, String&amp;gt;&amp;gt; elementEntry : elementStyles.entrySet()) {
    final Element element = elementEntry.getKey();
    final StringBuilder builder = new StringBuilder();
    for (final Map.Entry&amp;lt;String, String&amp;gt; styleEntry : elementEntry.getValue().entrySet()) {
        builder.append(styleEntry.getKey()).append(&quot;:&quot;).append(styleEntry.getValue()).append(&quot;;&quot;);
    }
    builder.append(element.attr(&quot;style&quot;));
    element.attr(&quot;style&quot;, builder.toString());
    element.removeAttr(&quot;class&quot;);
}

System.out.println(document.html());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One important thing to note in the code above is that &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; cannot handle pseudo classes in selectors.  Therefore, any
selector that contains a colon (&quot;:&quot;) is ignored.  Otherwise, each selector contained in the parsed sytle sheet is applied
to the HTML.  Inline styles are appended to each other, so ordering in your CSS stylesheet matters!  The output of the
code above is the modified HTML with all styles that could be applied converted to inline style declarations.  Now, when
this HTML is interpreted in a web mail client, it will look as it was intended to look by the developer.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Leverage Spring Boot&amp;#8217;s YAML Configuration Files in Groovy Scripts</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/12/30/groovy_script_spring_boot_yaml.html</link>
            <pubDate>Tue, 30 Dec 2014 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2014/12/30/groovy_script_spring_boot_yaml.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a &lt;a href=&quot;http://jdpgrailsdev.github.io/blog/2014/12/16/spring_context_groovy_script.html&quot; target=&quot;_blank&quot;&gt;previous&lt;/a&gt; blog post, I discussed how to load
an application&amp;#8217;s &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; configuration in a &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script.  This is a great way to test portions of your application without running the
entire application.  However, this approach has limits.  When trying this with a &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application, you miss out on a bunch of the magical
auto-enabling done by &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;.  This includes the ability of &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; to find certain properties and configuration files and load their
contents for use by &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;&apos;s property placeholder mechanism.  In this post, I&amp;#8217;ll discuss how to include a little extra &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; sauce to get the
&lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context to load a YAML file from the classpath and use its values for property placeholder replacement.  Let&amp;#8217;s start by looking at how
to tell the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context how to load the YAML file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class YamlMapPropertySourceLoader extends YamlPropertySourceLoader {

    @Override
    public PropertySource load(String name, Resource resource, String profile) throws IOException {
        if (ClassUtils.isPresent(Yaml.class.name, null)) {
            final YamlMapFactoryBean bean = new YamlMapFactoryBean();
            YamlMapFactoryBean factory = new YamlMapFactoryBean()
            factory.setDocumentMatchers(new DefaultProfileDocumentMatcher(), new SpringProfileDocumentMatcher(profile))
            factory.setResolutionMethod(ResolutionMethod.OVERRIDE)
            factory.setResources([resource] as Resource[])
            return new MapPropertySource(name, factory.getObject())
        }
        null
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code above defines a new &lt;code&gt;PropertySourceLoader&lt;/code&gt; class that produces a &lt;code&gt;PropertySource&lt;/code&gt; wrapping the loaded YAML file.  This bean is responsible for reading
in the contents of the &lt;code&gt;Resource&lt;/code&gt; that contains the YAML file loaded from the classpath and converting those values to a &lt;code&gt;Map&lt;/code&gt; that can be used
by the property placeholder resolver.  You may notice that it checks to see the &lt;a href=&quot;https://code.google.com/p/snakeyaml/&quot; target=&quot;_blank&quot;&gt;Snakeyaml&lt;/a&gt; library is on the classpath.  This code is a copy of
the code found in the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; &lt;code&gt;YamlPropertySourceLoader&lt;/code&gt;, with a small tweak to use the &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; instead of the &lt;code&gt;YamlPropertiesFactoryBean&lt;/code&gt;
(more on this in a bit).  The next step is to create a new Java-based configuration class to register the new &lt;code&gt;YamlMapPropertySourceLoader&lt;/code&gt; with the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;
context:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Configuration
@Order(Ordered.HIGHEST_PRECEDENCE)
class YamlConfiguration {

    @Bean
    public static EnvironmentAwarePropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(PropertySource yamlPropertySourceLoader) {
        MutablePropertySources propertySources = new MutablePropertySources()
        propertySources.addFirst(yamlPropertySourceLoader)

        EnvironmentAwarePropertySourcesPlaceholderConfigurer configurer = new EnvironmentAwarePropertySourcesPlaceholderConfigurer()
        configurer.propertySources = propertySources
        configurer
    }

    @Bean
    public PropertySource yamlPropertySourceLoader() throws IOException {
      YamlMapPropertySourceLoader loader = new YamlMapPropertySourceLoader()
      PropertySource applicationYamlPropertySource = loader.load(&apos;application.yml&apos;, new ClassPathResource(&apos;application.yml&apos;, getClass()), &apos;integration&apos;)
      applicationYamlPropertySource
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration above creates two beans:  one to enable the resolving of property placeholders based on the active profile and another to
actually find and load the YAML configuration file from the classpath.  The special &lt;code&gt;PropertySourcePlaceholderConfiguration&lt;/code&gt; is necessary to make
sure that the configuration loaded from the classpath is added to the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; framework context.  Otherwise, simply provided the loader is not
enough to expose the loaded data to the context.  This custom class provides a mechanism to merge the newly found and created property source with those
provided by &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class EnvironmentAwarePropertySourcesPlaceholderConfigurer extends PropertySourcesPlaceholderConfigurer implements EnvironmentAware, InitializingBean {

    MutablePropertySources propertySources
    Environment environment

    @Override
    public void setEnvironment(Environment environment) {
        this.environment = environment
        super.setEnvironment(environment)
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        def envPropertySources = environment.getPropertySources()
        propertySources.each { propertySource -&amp;gt;
            envPropertySources.addFirst(propertySource)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The custom configurer uses the loaded YAML property source and the configured &lt;code&gt;Environment&lt;/code&gt; to create a combined set of property sources that can be used for property placeholder replacement.
Once you have this new configuration class in place, you need to register it with the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;...
ctx.register(YamlConfiguration)
ctx.refresh()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After wiring all of this together and running the &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script, I noticed that the script was upset with some, but not all, of the property placeholders.  After some digging around, I noticed
that it was having issues with finding nested values in the YAML configuration.  For instance, let&amp;#8217;s say you have the following YAML configuration file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;service:
    host.url: &apos;localhost&apos;
settings:
    timeout: 30
    connection.timeout = 100
debug: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You would expect to be able to do something like this using the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; &lt;code&gt;Value&lt;/code&gt; annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Value(&quot;${service.host.url}&quot;)
private String hostUrl;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, because the &lt;a href=&quot;https://code.google.com/p/snakeyaml/&quot; target=&quot;_blank&quot;&gt;Snakeyaml&lt;/a&gt; library that backs the &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; does a literal translation of the configuration to map, separating keys wherever it finds a &apos;.&apos; character, the resolver
cannot find the key &lt;code&gt;service.host.url&lt;/code&gt; (it could find &lt;code&gt;service&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; under &lt;code&gt;service&lt;/code&gt;, etc).  One way to resolve this is to flatten out the map after loading it, but before returning it from the
property source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class YamlMapPropertySourceLoader extends YamlPropertySourceLoader {

    @Override
    public PropertySource load(String name, Resource resource, String profile) throws IOException {
        if (ClassUtils.isPresent(Yaml.class.name, null)) {
            final YamlMapFactoryBean bean = new YamlMapFactoryBean();
            YamlMapFactoryBean factory = new YamlMapFactoryBean()
            factory.setDocumentMatchers(new DefaultProfileDocumentMatcher(), new SpringProfileDocumentMatcher(profile))
            factory.setResolutionMethod(ResolutionMethod.OVERRIDE)
            factory.setResources([resource] as Resource[])
            return new MapPropertySource(name, flattenMap(factory.getObject()))
        }
        null
    }

        private Map flattenMap(Map aMap, prefix=null) {
        aMap.inject([:]) { map, entry -&amp;gt;
            if(entry.value instanceof Map) {
                map += flattenMap(entry.value, createKey(prefix, entry.key))
            } else {
                map.&quot;${createKey(prefix, entry.key)}&quot; = entry.value
            }
            map
        }
    }

    private String createKey(prefix, key) {
        (prefix?.length() &amp;gt; 0) ? &quot;${prefix}.${key}&quot; : key
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this updated version of the &lt;code&gt;YamlMapPropertySourceLoader&lt;/code&gt;, we use some &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt;-foo to flatten out the map so that the keys will match the strings provided to the &lt;code&gt;Value&lt;/code&gt; annotation.  Now, when this is combined
together and executed, you can run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;ctx.getEnvironment().getProperty(&apos;service.host.url&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to resolve a property placeholder value retrieved from a YAML configuration file in your &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script!&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
