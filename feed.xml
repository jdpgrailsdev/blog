<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Why We Can't Have Nice Things</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Mon, 24 Feb 2014 07:44:02 -0500</pubDate>
        <lastBuildDate>Mon, 24 Feb 2014 07:44:02 -0500</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Spring and Apache Curator</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/02/19/spring_curator.html</link>
            <pubDate>Wed, 19 Feb 2014 00:00:00 -0500</pubDate>
            <guid isPermaLink="false">/2014/02/19/spring_curator.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, I have been working a lot with &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt;.  &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt; provides a Java-based driver, but it does leave a little bit to be desired.  In steps &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt;, which was originally created and open-sourced
by &lt;a href=&quot;https://github.com/netflix/curator&quot;&gt;Neflix&lt;/a&gt; and is now maintained by Apache.  &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; uses a fluent-style syntax to making using &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt; much easier.  In particular, &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; contains a more robust client class that handles things such
as retry attempts, listeners and other utilities that would otherwise need to be manually wired up using the low-level Java-based driver.  In order to support the use of &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; within a Spring-based application,
I decided to create a library that makes it easy to define &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; clients in a Spring configuration for use in an application.  One of the thinks to know about the &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; client is that you only need one
per instance/ensemble of &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt;.  Therefore, using Spring to manage the injection of a Singleton bean into a class that needs access to the client is a perfect fit.  The repository can be found on
&lt;a href=&quot;https://github.com/jdpgrailsdev/spring-curator&quot;&gt;GitHub&lt;/a&gt;.  Please check it out and let me know what you think.  As always, contributions are welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_future_enhancements&quot;&gt;Future Enhancements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, the &lt;a href=&quot;https://github.com/jdpgrailsdev/spring-curator&quot;&gt;spring-curator&lt;/a&gt; library only supports the definition, creation and injection of &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; client instances.  In the future, I would like to add the
following support to the &lt;code&gt;spring-curator&lt;/code&gt; library:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support for registring custom retry policies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definition of the following via the Spring configuration:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeaderLatch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeaderSelector&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*Mutex locks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*Barrier barriers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SharedCount&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DistributedAtomicLong&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PathChildrenCache&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NodeCache&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PersistentEphemeralNode&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*Queue queues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails 2.3, Maven and Local Repositories</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/02/10/grails_maven_local_repo.html</link>
            <pubDate>Mon, 10 Feb 2014 00:00:00 -0500</pubDate>
            <guid isPermaLink="false">/2014/02/10/grails_maven_local_repo.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the great new features in &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; 2.3 is the ability to use &lt;a href=&quot;http://www.eclipse.org/aether/&quot;&gt;Aether&lt;/a&gt; to resolve dependencies in place of Ivy.  This is great news if
you already use &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; to build other projects, as it now means you can have predictable builds between your &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; and non-http://grails.org[Grails] applications.  However, like
any new feature, there are a few rough edges.  I ran into one the other day when trying to determine why one of my &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications was not picking up dependencies from the local &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;
cache  (&lt;code&gt;~/.m2/repository&lt;/code&gt;).  After some digging around, I ran across &lt;a href=&quot;http://jira.grails.org/browse/GRAILS-10921&quot;&gt;this bug&lt;/a&gt;.  According to it, the mavenLocal directive in the
repositories section of &lt;code&gt;BuildConfig.groovy&lt;/code&gt; is not honored when using the &lt;a href=&quot;http://www.eclipse.org/aether/&quot;&gt;Aether&lt;/a&gt; resolver.  So that stinks.  I quickly realized that we could make the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; dependency resolver
DSL pick up the local &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; repository by simply adding a new file-based repository:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;    repositories {
        inherits true // Whether to inherit repository definitions from plugins

        mavenRepo &quot;file://${System.getProperty(&apos;user.home&apos;)}/.m2/repository&quot;

        ...
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This little hack will allow you to continue checking the local &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; repository when using the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; command line tools and the &lt;a href=&quot;http://grails.org/doc/2.3.x/guide/introduction.html#whatsNew23&quot;&gt;Maven dependency resolution support&lt;/a&gt;
new to &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; 2.3.  The nice thing about this is that when/if the issue is fixed so that the local &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; repository is honored, this fix should not cause any issues.  Not long after I made this fix,
I went to build the application on &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; and notice some more funny business with dependencies.  After some digging, I determined the issue was due to the fact that now that the
&lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications were using &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; for dependency resolution and not Ivy, they were sharing one local dependency cache.  When the Jenkins job is a &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; project, I typically choose
the option to create a repository per workspace, to avoid collisions between jobs.  With a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; job, you do not have this option.  The option that you do have is setting the
&lt;code&gt;grails.dependency.cache.dir&lt;/code&gt; build property to tell &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; where to cache and look for local dependencies.  I decided to conditionally set this based on whether or not the application
was being built on Jenkins or not (the reason for this is that I already have it set in my local &lt;code&gt;~/.grails/settings.groovy&lt;/code&gt; to have a separate cache per application).  Once again,
I modified the BuildConfig.groovy file to contain the following logic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;    final String localMavenRepo = System.getenv(&apos;JENKINS_HOME&apos;) ? &quot;${System.getenv(&apos;WORKSPACE&apos;)}/.m2/repository&quot; :
                                        &quot;${System.getProperty(&apos;user.home&apos;)}/.m2/repository&quot;

    ...

    /**
      * If the build is being executed on Jenkins, set up the ivy cache.  This
      * is important as Grails checks to see if this has been set before allowing
      * an override of the local Maven repository.
      */
    if(System.getenv(&apos;JENKINS_HOME&apos;)) {
        grails.dependency.cache.dir = localMavenRepo
    }

    grails.project.dependency.resolver = &quot;maven&quot; // or ivy
    grails.project.dependency.resolution = {
        pom true

        // inherit Grails&apos; default dependencies
        inherits(&quot;global&quot;) {
        }

        log &quot;error&quot; // log level of Ivy resolver, either &apos;error&apos;, &apos;warn&apos;, &apos;info&apos;, &apos;debug&apos; or &apos;verbose&apos;
        checksums false // Whether to verify checksums on resolve
        legacyResolve false // whether to do a secondary resolve on plugin installation, not advised and here for backwards compatibility
        localRepository = localMavenRepo

        repositories {
            inherits true // Whether to inherit repository definitions from plugins

            mavenRepo &quot;file://${localMavenRepo}&quot;

            ...
        }
    }

    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s worth noting that in the example above, I not only set the &lt;code&gt;grails.dependency.cache.dir&lt;/code&gt; &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; build property, but
I also set the &lt;code&gt;localRepository&lt;/code&gt; property of the dependency resolution DSL to ensure that the &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; dependency resolution is using it both as a place to check
for dependencies AND a place to store the cached dependencies (see the &lt;a href=&quot;https://github.com/grails/grails-core/blob/2.3.x/grails-aether/src/main/groovy/org/codehaus/groovy/grails/resolve/maven/aether/AetherDependencyManager.groovy&quot;&gt;AetherDependencyManager.groovy&lt;/a&gt; source
file in the &lt;code&gt;grails-aether&lt;/code&gt; module for more details).  Now when the application builds on Jenkins, not only does it have a local &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; repository as part of
the list of repositories, but that repository is stored in the workspace for the Jenkins build job.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Blog Makeover</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/02/06/redesign.html</link>
            <pubDate>Sat, 8 Feb 2014 00:00:00 -0500</pubDate>
            <guid isPermaLink="false">/2014/02/06/redesign.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In an attempt to get myself to start blogging more regularly, I have decided to re-do my blog (which has largely been dormant).  A few days ago,
I read an interesting blog post by &lt;a href=&quot;http://melix.github.io/blog//2014/02/hosting-jbake-github.html&quot;&gt;Cédric Champeau&lt;/a&gt; about using &lt;a href=&quot;http://www.jbake.org&quot;&gt;JBake&lt;/a&gt; to generate
blog posts from &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, &lt;a href=&quot;http://www.methods.co.nz/asciidoc/&quot;&gt;AsciiDoc&lt;/a&gt; or HTML and publish them to &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;.  The blog post is pretty straight forward and with some minor tweaks
I was able to give my blog a makeover.  Additionally, its much easier now to author and publish posts.  Over the next few weeks, I am going to continue
to make tweaks to give the blog my own style.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Relocation</title>
            <link>http://jdpgrailsdev.github.io/blog//2012/12/08/relocation.html</link>
            <pubDate>Sat, 8 Dec 2012 00:00:00 -0500</pubDate>
            <guid isPermaLink="false">/2012/12/08/relocation.html</guid>
            <description>
                    &lt;p&gt;I have decided to relocate my blog from &lt;a href=&quot;http://jonathan-whywecanthavenicethings.blogspot.com&quot;&gt;Blog Spot&lt;/a&gt; to &lt;a href=&quot;http://jdpgrailsdev.github.io/blog&quot;&gt;GitHub&lt;/a&gt;. I have not actively posted anything in a while, but I am going to start&lt;br/&gt;up again and felt that hosting it on Github was a better choice. I will leave the old blog up with a pointer over to the new blog.&lt;/p&gt;
            </description>
        </item>
        <item>
            <title>Where&apos;s My Exceptions, Spring Data MongoDB?</title>
            <link>http://jdpgrailsdev.github.io/blog//2011/11/19/spring_data_mongodb_exceptions.html</link>
            <pubDate>Sat, 19 Nov 2011 00:00:00 -0500</pubDate>
            <guid isPermaLink="false">/2011/11/19/spring_data_mongodb_exceptions.html</guid>
            <description>
                    &lt;p&gt;To be fair, the Spring Data MongoDB project is currently only at Milestone releases (as of writing, they are up to M5). Unlike most open source projects, they do have fairly good reference documentation. Recently, we decided to add some unique contraints to a document by adding a compound index. The Spring Data MongoDB project provides a couple mechanisms to be able to do this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use the MongoTemplate class&apos;s ensureIndex method to programmatically create an index at runtime.&lt;/li&gt;
  &lt;li&gt;Use the CompoundIndexes and CompoundIndex annotations to declare the indexes on the document model class.&lt;/li&gt;
  &lt;li&gt;Manually create the index(es) against the database using the MongoDB command line.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For a variety of reasons, I decided to go with option #2. Using the annotations is pretty straight forward:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package test;

import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection=&amp;quot;people&amp;quot;)
@CompoundIndexes(value={
    @CompoundIndex(name=&amp;quot;people_first_name_address_idx&amp;quot;, def=&amp;quot;{&amp;#39;firstName&amp;#39;:1, &amp;#39;address&amp;#39;:1}&amp;quot;, unique=true),
    @CompoundIndex(name=&amp;quot;people_last_name_address_idx&amp;quot;, def=&amp;quot;{&amp;#39;lastName&amp;#39;:1, &amp;#39;address&amp;#39;:1}&amp;quot;, unique=true)
})
public class Person {

    private String address;
    private String firstName;
    private String lastName;

    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The example above declares two MongoDB compound indexes. In the first one, it is creating an index on the firstName and address properties of the document. The &quot;:1&quot; tells the index to sort that column in ascending order for the index (see the org.springframework.data.mongodb.core.query.Order class&apos;s Javadoc for more details on sort orders). The &quot;unique=true&quot; property tells MongoDB to reject any inserts/saves that violate this contraint (think a unique contraint in the SQL world). There are other properties on the CompoundIndex annotation, so refer to the Spring Data MongoDB Javadocs for more information. When the application starts up, the Spring Data MongoDB library listens for the application start event via Spring and will create the indexes automatically (if they don&apos;t already exist). This is a benefit over options 1 and 3 above that require manual intervention.&lt;/p&gt;&lt;h2&gt;So Why Didn&apos;t It Work?&lt;/h2&gt;&lt;p&gt;According to the paragraph above, it is pretty easy to set up indexes using Spring Data MongoDB. You annotate your classes, start your application and run some tests to make sure the unique constraint is being honored, right? That&apos;s what I thought too. I started out by annotating my document objects and re-building my application. Before installing and starting my application in Tomcat, I decided to completely drop my database from MongoDB to ensure that everything was being created properly. Once I was sure everything was clean, I installed my application and started Tomcat, causing Spring Data MongoDB to create the database, the collections and the indexes when the web application started. I verified this by running the following command in MongoDB to see the indexes existed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MongoDB shell version: 1.8.2
connecting to: test
&amp;gt; db.people.getIndexes()
[
        {
                &amp;quot;name&amp;quot; : &amp;quot;_id_&amp;quot;,
                &amp;quot;ns&amp;quot; : &amp;quot;test.people&amp;quot;,
                &amp;quot;key&amp;quot; : {
                     &amp;quot;_id&amp;quot; : 1
                },
                &amp;quot;v&amp;quot; : 0
        },
        {
                &amp;quot;name&amp;quot; : &amp;quot;people_first_name_address_idx&amp;quot;,
                &amp;quot;ns&amp;quot; : &amp;quot;test.people&amp;quot;,
          &amp;quot;dropDups&amp;quot; : false,
          &amp;quot;sparse&amp;quot; : false,
          &amp;quot;unique&amp;quot; : true,
          &amp;quot;key&amp;quot; : {
                        &amp;quot;firstName&amp;quot; : 1,
                        &amp;quot;address&amp;quot; : 1
                },
                &amp;quot;v&amp;quot; : 0
        },
        {
                &amp;quot;name&amp;quot; : &amp;quot;people_last_name_address_idx&amp;quot;,
              &amp;quot;ns&amp;quot; : &amp;quot;test.people&amp;quot;,
                &amp;quot;dropDups&amp;quot; : false,
          &amp;quot;sparse&amp;quot; : false,
          &amp;quot;unique&amp;quot; : true,
                &amp;quot;key&amp;quot; : {
                    &amp;quot;lastName&amp;quot; : 1,
                    &amp;quot;address&amp;quot; : 1
                },
                &amp;quot;v&amp;quot; : 0
        }
]
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allowed me to verify that Spring Data MongoDB actually did create the indexes at startup. So far, so good. My next step was to insert some data to the collection via my application. This worked and I was able to verify the document in MongoDB by using the .find({}) operation on the collection from the command line. The next step was to attempt to insert the exact same document, which should fail due to the unique constraints. To my surprise, it did not fail and I did not receive any exceptions from the MongoTemplate class (which executed the insert). Just to make sure I wasn&apos;t crazy, I took the JSON and inserted it directly to the collection using the .save({...}) operation on the collection via the Mongo command line. It did exactly what I expected it to do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E11000 duplicate key error index: test-people.$people_first_name_address_idx  dup key: { : &amp;quot;John&amp;quot;, : &amp;quot;123 Fake Street&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This meant that index was working. So what was Spring Data MongoDB&apos;s problem? What was happening to the error? After some Google-foo, I stumbled across this JIRA issue: &lt;a href=&quot;https://jira.springsource.org/browse/DATAMONGO-134&quot;&gt;https://jira.springsource.org/browse/DATAMONGO-134&lt;/a&gt;. Hidden in there was the answer to my problem. By default, the MongoTemplate class uses the default WriteConcern from the MongoDB Java Driver library. The default WriteConcern as it turns out does NOT raise exceptions for server errors, only network errors. This means that you will only receive an exception if you lose connection to the database or try to connect to an invalid address/port and will not receive an exception for any errors generated by MongoDB. Lame, but easy to fix. The WriteConcern class comes with some static constants that define the following write concern options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/** No exceptions are raised, even for network issues */
public final static WriteConcern NONE = new WriteConcern(-1);

/** Exceptions are raised for network issues, but not server errors */
public final static WriteConcern NORMAL = new WriteConcern(0);

/** Exceptions are raised for network issues, and server errors; waits on a server for the write operation */
public final static WriteConcern SAFE = new WriteConcern(1);

/** Exceptions are raised for network issues, and server errors and the write operation waits for the server to flush the data to disk*/
public final static WriteConcern FSYNC_SAFE = new WriteConcern(true);

/** Exceptions are raised for network issues, and server errors; waits for at least 2 servers for the write operation*/
public final static WriteConcern REPLICAS_SAFE = new WriteConcern(2);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, depending on your needs, you can change the write concern options used by the MongoTemplate class. Since I was using Spring to instantiate the MongoTemplate class, this required a couple of changes to my applicationContext.xml file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;beans 
    xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;      
    xmlns:mongo=&amp;quot;http://www.springframework.org/schema/data/mongo&amp;quot; 
    xmlns:util=&amp;quot;http://www.springframework.org/schema/util&amp;quot;  
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; 
    xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; 
    xsi:schemalocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd&amp;quot;&amp;gt;

    ...

    &amp;lt;mongo:db-factory dbname=&amp;quot;${mongodb.database}&amp;quot; host=&amp;quot;${mongodb.host}&amp;quot; id=&amp;quot;databaseFactory&amp;quot; password=&amp;quot;${mongodb.password}&amp;quot; port=&amp;quot;${mongodb.port}&amp;quot; username=&amp;quot;${mongodb.username}&amp;quot; /&amp;gt;

    &amp;lt;bean class=&amp;quot;org.springframework.data.mongodb.core.MongoTemplate&amp;quot; id=&amp;quot;mongoTemplate&amp;quot;&amp;gt;
        &amp;lt;constructor-arg name=&amp;quot;mongoDbFactory&amp;quot; ref=&amp;quot;databaseFactory&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;writeConcern&amp;quot;&amp;gt;
            &amp;lt;util:constant static-field=&amp;quot;com.mongodb.WriteConcern.SAFE&amp;quot; &amp;gt;&amp;lt;/util:constant&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    ...  
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After making this change and restarting the application, I finally go the exception I was expecting to receive from Spring Data MongoDB:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2011-11-18 15:44:32,913 ERROR - Unable to create or update person &amp;#39;{&amp;quot;firstName&amp;quot; : &amp;quot;John&amp;quot;, &amp;quot;lastName&amp;quot; : &amp;quot;Doe&amp;quot;, &amp;quot;address&amp;quot;: &amp;quot;123 Fake Street&amp;quot;}&amp;#39;.
org.springframework.dao.DuplicateKeyException: E11000 duplicate key error index: test.people.$people_first_name_address_idx  dup key: { : &amp;quot;John&amp;quot;, : &amp;quot;123 Fake Street&amp;quot;}; nested exception is com.mongodb.MongoException$DuplicateKey: E11000 duplicate key error index: test.people.$people_first_name_address_idx  dup key: { : &amp;quot;John&amp;quot;, : &amp;quot;123 Fake Street&amp;quot;};
    at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:53)
    at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:1373)
    at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:333)
    at org.springframework.data.mongodb.core.MongoTemplate.saveDBObject(MongoTemplate.java:739)
    at org.springframework.data.mongodb.core.MongoTemplate.doSave(MongoTemplate.java:679)
    at org.springframework.data.mongodb.core.MongoTemplate.save(MongoTemplate.java:669)
    at org.springframework.data.mongodb.core.MongoTemplate.save(MongoTemplate.java:665)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)
    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)
    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147
    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1465)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1396)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1345)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1335)
    at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
    at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537)
    at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:699)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)
    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)
    at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
    at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)
    at java.lang.Thread.run(Thread.java:680)
Caused by: com.mongodb.MongoException$DuplicateKey: E11000 duplicate key error index: test.people.$people_first_name_address_idx  dup key: { : &amp;quot;John&amp;quot;, : &amp;quot;123 Fake Street&amp;quot;};
    at com.mongodb.CommandResult.getException(CommandResult.java:80)
    at com.mongodb.CommandResult.throwOnError(CommandResult.java:116)
    at com.mongodb.DBTCPConnector._checkWriteError(DBTCPConnector.java:126)
    at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:148)
    at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:132)
    at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:262)
    at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:217)
    at com.mongodb.DBCollection.insert(DBCollection.java:71)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; at com.mongodb.DBCollection.save(DBCollection.java:633)&lt;br/&gt; at org.springframework.data.mongodb.core.MongoTemplate$13.doInCollection(MongoTemplate.java:745)&lt;br/&gt; at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:331)&lt;br/&gt; ... 41 more&lt;/p&gt;&lt;p&gt;So, it is really hard to blame the Spring Data MongoDB guys for this issue, as it is really a configuration option of the underlying MongoDB Java Driver. However, the MongoTemplate class does have a setWriteConcern method for this very reason and it would have saved me some time if the reference documentation had mentioned this and/or had some examples on how to change the setting. I guess that will be in the &quot;release&quot; :).&lt;/p&gt;
            </description>
        </item>
    </channel>
</rss>
