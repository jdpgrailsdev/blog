<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Tue, 24 Feb 2015 07:53:00 -0800</pubDate>
        <lastBuildDate>Tue, 24 Feb 2015 07:53:00 -0800</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Using Thrift Genreated Classes with a JSON REST API in Spring Boot - Part I</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/02/24/thrift_json_rest_spring_boot_part_i.html</link>
            <pubDate>Tue, 24 Feb 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/02/24/thrift_json_rest_spring_boot_part_i.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; in your project, sometimes you may run into situations where you would like to be able interact with your service using
JSON and REST instead of the binary &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; protocol.  If you try to simply serialize/deserialize your &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; objects to/from JSON, you
will notice that a lot of additional cruft is included (such as the &lt;code&gt;isSet&lt;/code&gt; fields, etc).  Furthermore, you don&amp;#8217;t have any control over
include/excluding fields that have not yet been set, as most JSON libraries will happily include every field present in the class by default.
Luckily, you can tackle all of these issues by using some custom &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; code in combination with &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; and &lt;a href=&quot;https://spring.io/guides/gs/rest-service/&quot; target=&quot;_blank&quot;&gt;Spring&amp;#8217;s REST support&lt;/a&gt;.  In part
one of this series, I will show how to handle the serialization of &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; objects into JSON.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_simple_rest_controller&quot;&gt;Simple Rest Controller&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This first thing that you will need to create is a &lt;code&gt;RestController&lt;/code&gt; to expose access to your &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; objects.  Let&amp;#8217;s assume that you have
the following &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; object defined in your &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; definition file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-thrift&quot; data-lang=&quot;thrift&quot;&gt;namespace java com.example.v1

enum BookFormat {
    ELECTRONIC,
    HARDCOVER,
    PAPERBACK
}

struct Book {
    10:required string      author
    20:required string      title
    30:required string      isbn10
    40:required string      isbn13
    50:required BookFormat  format
    60:required i64         publishDate
    70:optional string      language
    80:optional i64         pages
    90:optional i64         edition
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To provide a way to get a &lt;code&gt;Book&lt;/code&gt; by title, you would create the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.example.v1.Book;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&quot;/api/v1/books&quot;)
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    @RequestMapping(method=RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE}, consumes = {MediaType.ALL_VALUE})
    public ResponseEntity&amp;lt;Book&amp;gt; getBookByTitle(@RequestParam(value=&quot;title&quot;, required=true) final String title) {
        Book book = convertToThrift(bookRepository.findByTitle(title));
        if(book != null) {
            return new ResponseEntity&amp;lt;Book&amp;gt;(book, HttpStatus.OK);
        } else {
            return new ResponseEntity&amp;lt;Book&amp;gt;(HttpStatus.NOT_FOUND);
        }
    }

    private Book converToThrift(BookEntity bookEntity) {
        // Let&apos;s assume this method handles the creation of a Thrift-based Book from the JPA entity
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an HTTP GET is made to &lt;a href=&quot;http://&amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;/api/v1/books&quot; class=&quot;bare&quot;&gt;http://&amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;/api/v1/books&lt;/a&gt; with the query string &lt;code&gt;?title=&amp;lt;some title&amp;gt;&lt;/code&gt; that matches a known book, the book will be
returned in JSON format.  As mentioned earlier, this will work with &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; objects out of the box, as &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; includes &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; support for
controllers annotated with the &lt;code&gt;RestController&lt;/code&gt; annotation, but will included unwanted fields.  To address this, the next step is to add a custom
&lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; serializer.  In this example, the code has been extracted to an abstract class to make it easier to add additional serializers and/or for
cases where composition is used in the &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; definition file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.example.controllers.json;

import java.io.IOException;
import java.util.Collection;

import org.apache.thrift.TBase;
import org.apache.thrift.TFieldIdEnum;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.google.common.base.CaseFormat;

/**
 * This abstract class represents a generic serializer for converting Thrift-based entities to JSON.
 *
 * @param &amp;lt;E&amp;gt; An implementation of the {@link TFieldIdEnum} interface.
 * @param &amp;lt;T&amp;gt; An implementation of the {@link TBase} interface.
 */
public abstract class AbstractThriftSerializer&amp;lt;E extends TFieldIdEnum, T extends TBase&amp;lt;T, E&amp;gt;&amp;gt; extends JsonSerializer&amp;lt;T&amp;gt; {

    private static final Logger log = LoggerFactory.getLogger(AbstractThriftSerializer.class);

    @Override
    public Class&amp;lt;T&amp;gt; handledType() {
        return getThriftClass();
    }

    @Override
    public void serialize(final T value, final JsonGenerator jgen, final SerializerProvider provider) throws IOException, JsonProcessingException {
        jgen.writeStartObject();
        for(final E field : getFieldValues()) {
            if(value.isSet(field)) {
                final Object fieldValue = value.getFieldValue(field);
                if(fieldValue != null) {
                    log.debug(&quot;Adding field {} to the JSON string...&quot;, CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,field.getFieldName()));
                    jgen.writeFieldName(CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,field.getFieldName()));
                    if(fieldValue instanceof Short) {
                        jgen.writeNumber((Short)fieldValue);
                    } else if(fieldValue instanceof Integer) {
                        jgen.writeNumber((Integer)fieldValue);
                    } else if(fieldValue instanceof Long) {
                        jgen.writeNumber((Long)fieldValue);
                    } else if(fieldValue instanceof Double) {
                        jgen.writeNumber((Double)fieldValue);
                    } else if(fieldValue instanceof Float) {
                        jgen.writeNumber((Float)fieldValue);
                    } else if(fieldValue instanceof Boolean) {
                        jgen.writeBoolean((Boolean)fieldValue);
                    } else if(fieldValue instanceof String) {
                        jgen.writeString(fieldValue.toString());
                    } else if(fieldValue instanceof Collection) {
                        log.debug(&quot;Array opened for field {}.&quot;, CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,field.getFieldName()));
                        jgen.writeStartArray();
                        for(final Object arrayObject : (Collection&amp;lt;?&amp;gt;)fieldValue) {
                            jgen.writeObject(arrayObject);
                        }
                        jgen.writeEndArray();
                        log.debug(&quot;Array closed for field {}.&quot;, CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,field.getFieldName()));
                    } else {
                        jgen.writeObject(fieldValue);
                    }
                } else {
                    log.debug(&quot;Skipping converting field {} to JSON:  value is null!&quot;, CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,field.getFieldName()));
                }
            } else {
                log.debug(&quot;Skipping converting field {} to JSON:  field has not been set!&quot;, CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,field.getFieldName()));
            }
        }
        jgen.writeEndObject();
    }

    /**
     * Returns an array of {@code &amp;lt;E&amp;gt;} enumerated values that represent the fields present in the
     * Thrift class associated with this serializer.
     * @return The array of {@code &amp;lt;E&amp;gt;} enumerated values that represent the fields present in the
     *   Thrift class.
     */
    protected abstract E[] getFieldValues();

    /**
     * Returns the {@code &amp;lt;T&amp;gt;} implementation class associated with this serializer.
     * @return The {@code &amp;lt;T&amp;gt;} implementation class
     */
    protected abstract Class&amp;lt;T&amp;gt; getThriftClass();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AbstractThriftSerializer&lt;/code&gt; extends the &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; &lt;code&gt;JsonSerializer&lt;/code&gt; to provide instructions to &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; on how to convert
a &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; based object to JSON.  In particular, it uses the &lt;code&gt;TFieldIdEnum&lt;/code&gt; enumeration found in each &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; generated class
that provides metadata about each field in the class.  If a value has been set for the each field, the value is converted
to JSON based on the Java type associated with that field.  In addition, some additional logic was added to convert the
camel cased field names to lower case underscore format using &lt;a href=&quot;https://github.com/google/guava&quot; target=&quot;_blank&quot;&gt;Google Guava&lt;/a&gt;&apos;s &lt;code&gt;CaseFormat&lt;/code&gt; utility.  Implementations of this abstract
class simply need to provide access to the &lt;code&gt;TFieldIdEnum&lt;/code&gt; enumeration declared within the class, as well as the specific type
for registration with &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.example.json;

import com.example.v2.Book;
import com.example.v2.Book._Fields;

public class BookSerializer extends AbstractThriftSerializer&amp;lt;Book._Fields, Book&amp;gt; {

    @Override
    protected _Fields[] getFieldValues() {
        return Book._Fields.values();
    }

    @Override
    protected Class&amp;lt;Book&amp;gt; getThriftClass() {
        return Book.class;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final step is to register the custom serializer with &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; so that the REST
controller will use it when converting our &lt;code&gt;Book&lt;/code&gt; object to JSON.  Let&amp;#8217;s re-visit the &lt;code&gt;BookController&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.v1.Book;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

@RestController
@RequestMapping(&quot;/api/v1/books&quot;)
public class BookController implements InitializingBean {

    @Autowired
    private BookRepository bookRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter;

    @Override
    public void afterPropertiesSet() throws Exception {
        // Register the custom Thrift &amp;lt;&amp;gt; JSON deserializers/serializers.
        final ObjectMapper mapper = mappingJackson2HttpMessageConverter.getObjectMapper();
        final SimpleModule bookModule = new SimpleModule(&quot;Book&quot;, new Version(1,0,0,null,null,null));
        bookModule.addSerializer(new BookSerializer());
        mapper.registerModule(bookModule);
    }

    @RequestMapping(method=RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE}, consumes = {MediaType.ALL_VALUE})
    public ResponseEntity&amp;lt;Book&amp;gt; getBookByTitle(@RequestParam(value=&quot;title&quot;, required=true) final String title) {
        Book book = convertToThrift(bookRepository.findByTitle(title));
        if(book != null) {
            return new ResponseEntity&amp;lt;Book&amp;gt;(book, HttpStatus.OK);
        } else {
            return new ResponseEntity&amp;lt;Book&amp;gt;(HttpStatus.NOT_FOUND);
        }
    }

    private Book converToThrift(BookEntity bookEntity) {
        // Let&apos;s assume this method handles the creation of a Thrift-based Book from the JPA entity
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what did we add?  First, we modified the &lt;code&gt;BookController&lt;/code&gt; to implement the &lt;code&gt;InitializingBean&lt;/code&gt; interface so that we could handle the
&lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; configuration at bean creation time.  Second, we injected the &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;, which is provided by
{sprinb_boot} to handle the conversion of entities to JSON when a controller action is marked to produce JSON.  Finally, we implemented
the &lt;code&gt;afterPropertiesSet&lt;/code&gt; method of the &lt;code&gt;InitializingBean&lt;/code&gt; interface to register our &lt;code&gt;BookSerializer&lt;/code&gt; with the &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; &lt;code&gt;ObjectMapper&lt;/code&gt;
used by the &lt;code&gt;MappingJackson2HttpMessageConverter&lt;/code&gt;.  Now, when we perform an HTTP GET against our endpoint for a book title that matches
an existing book, we will see the following JSON response:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;author&quot; : &quot;Rob Friesel&quot;,
    &quot;title&quot; : &quot;PhamtomJS Cookbook&quot;,
    &quot;isbn_10&quot; : &quot;178398192X&quot;,
    &quot;isbn_13&quot; : &quot;978-1783981922&quot;,
    &quot;format&quot; : &quot;PAPERBACK&quot;,
    &quot;publish_date&quot; : 1402531200000,
    &quot;language&quot; : &quot;English&quot;,
    &quot;pages&quot; : 276,
    &quot;edition&quot; : 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what did we accomplish.  First, we were able to customize how &lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson 2&lt;/a&gt; converts an object to JSON.  Second, we were able to convert our
&lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; objects to JSON in a manner of our choosing.  Third, we did all of this without having to create any new DTO&amp;#8217;s or extend from our
generated &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; objects.  In the next post, I will show how to handle the custom deserialization of JSON into &lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Thrift&lt;/a&gt; based objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Custom PostgreSQL Hstore Data Type with Spring, JPA and Hibernate</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/27/spring_jpa_postgresql_hstore.html</link>
            <pubDate>Tue, 27 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/27/spring_jpa_postgresql_hstore.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting &lt;a href=&quot;http://www.postgresql.org&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; version 9.0, the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt; data type was introduced, which allows for the storing of arbitrary sets of key/value pairs within a single column.  This
data type can be leveraged for a bunch of different situations, such as for storing custom/random attributes, semi-structured data or in any scenario where the number and
type of columns associated with an entity stored in a table varies.  As with most new/database vendor-specific features, support for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt; data type does not exist
as a first-level data type in the &lt;a href=&quot;http://www.postgresql.org&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; dialect provided by &lt;a href=&quot;https://hibernate.org&quot; target=&quot;_blank&quot;&gt;Hibernate&lt;/a&gt;.  However, both JPA and &lt;a href=&quot;https://hibernate.org&quot; target=&quot;_blank&quot;&gt;Hibernate&lt;/a&gt; provide mechanisms that allow you to customize the
way in which data stored in an entity is prepared for insertion into a database table and vice-versa.  The &lt;a href=&quot;http://en.wikibooks.org/wiki/Java_Persistence/Basic_Attributes#Converters_.28JPA_2.1.29&quot; target=&quot;_blank&quot;&gt;JPA Attribute Converter&lt;/a&gt; specification allows you to provide
a custom &lt;code&gt;AttributeConverter&lt;/code&gt; implementation that governs how data stored in a field of an entity gets converted for storage in the database and how to convert the column
data back into a Java type.  Normally, this would be how you would implement support for an un-supported data type.  However, due to an &lt;a href=&quot;https://hibernate.atlassian.net/browse/HHH-8804&quot; target=&quot;_blank&quot;&gt;Hibernate issue with Converters and parameterized types&lt;/a&gt;, this won&amp;#8217;t work
for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt;, unless you want to map it to a Java &lt;code&gt;String&lt;/code&gt; type instead of a Java &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; type, which makes more sense for an arbitrary key/value store.
The solution?  Leverage &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/3.6/reference/en-US/html/types.html#types-custom-ut&quot; target=&quot;_blank&quot;&gt;Hibernate&amp;#8217;s Custom Types&lt;/a&gt; support!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.example.jpa.support;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.hibernate.HibernateException;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.usertype.UserType;

/**
 * Custom Hibernate {@link UserType} used to convert between a {@link Map}
 * and PostgreSQL {@code hstore} data type.
 */
public class HstoreUserType implements UserType {

    /**
     * PostgreSQL {@code hstore} field separator token.
     */
    private static final String HSTORE_SEPARATOR_TOKEN = &quot;=&amp;gt;&quot;;

    /**
     * {@link Pattern} used to find and split {@code hstore} entries.
     */
    private static final Pattern HSTORE_ENTRY_PATTERN = Pattern.compile(String.format(&quot;\&quot;(.*)\&quot;%s\&quot;(.*)\&quot;&quot;, HSTORE_SEPARATOR_TOKEN));

    /**
     * The PostgreSQL value for the {@code hstore} data type.
     */
    public static final int HSTORE_TYPE = 1111;

    @Override
    public int[] sqlTypes() {
        return new int[] { HSTORE_TYPE };
    }

    @SuppressWarnings(&quot;rawtypes&quot;)
    @Override
    public Class returnedClass() {
        return Map.class;
    }

    @Override
    public boolean equals(final Object x, final Object y) throws HibernateException {
        return x.equals(y);
    }

    @Override
    public int hashCode(final Object x) throws HibernateException {
        return x.hashCode();
    }

    @Override
    public Object nullSafeGet(final ResultSet rs, final String[] names,
            final SessionImplementor session, final Object owner)
            throws HibernateException, SQLException {
        return convertToEntityAttribute(rs.getString(names[0]));
    }

    @SuppressWarnings(&quot;unchecked&quot;)
    @Override
    public void nullSafeSet(final PreparedStatement st, final Object value, final int index,
            final SessionImplementor session) throws HibernateException, SQLException {
        st.setObject(index, convertToDatabaseColumn((Map&amp;lt;String,Object&amp;gt;)value), HSTORE_TYPE);

    }

    @SuppressWarnings(&quot;unchecked&quot;)
    @Override
    public Object deepCopy(final Object value) throws HibernateException {
        return new HashMap&amp;lt;String,Object&amp;gt;(((Map&amp;lt;String,Object&amp;gt;)value));
    }

    @Override
    public boolean isMutable() {
        return true;
    }

    @Override
    public Serializable disassemble(final Object value) throws HibernateException {
        return (Serializable) value;
    }

    @Override
    public Object assemble(final Serializable cached, final Object owner)
            throws HibernateException {
        return cached;
    }

    @Override
    public Object replace(final Object original, final Object target, final Object owner)
            throws HibernateException {
        return original;
    }


    private String convertToDatabaseColumn(final Map&amp;lt;String, Object&amp;gt; attribute) {
        final StringBuilder builder = new StringBuilder();
        for (final Map.Entry&amp;lt;String, Object&amp;gt; entry : attribute.entrySet()) {
            if(builder.length() &amp;gt; 1) {
                builder.append(&quot;, &quot;);
            }
            builder.append(&quot;\&quot;&quot;);
            builder.append(entry.getKey());
            builder.append(&quot;\&quot;&quot;);
            builder.append(HSTORE_SEPARATOR_TOKEN);
            builder.append(&quot;\&quot;&quot;);
            builder.append(entry.getValue().toString());
            builder.append(&quot;\&quot;&quot;);
        }
        return builder.toString();
    }

    private Map&amp;lt;String, Object&amp;gt; convertToEntityAttribute(final String dbData) {
        final Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;String, Object&amp;gt;();
        final StringTokenizer tokenizer = new StringTokenizer(dbData, &quot;,&quot;);

        while(tokenizer.hasMoreTokens()) {
            final Matcher matcher = HSTORE_ENTRY_PATTERN.matcher(tokenizer.nextToken().trim());
            if(matcher.find()) {
                data.put(matcher.group(1), matcher.group(2));
            }
        }

        return data;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example above implements the &lt;a href=&quot;https://hibernate.org&quot; target=&quot;_blank&quot;&gt;Hibernate&lt;/a&gt; &lt;code&gt;UserType&lt;/code&gt; interface and provides methods (&lt;code&gt;nullSafeGet&lt;/code&gt; and &lt;code&gt;nullSafeSet&lt;/code&gt;) to handle the conversion.  It also provides the appropriate
data type value for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt; (1111).  Now that you have a custom &lt;code&gt;UserType&lt;/code&gt; implementation for the &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/hstore.html&quot; target=&quot;_blank&quot;&gt;PostgreSQL hstore datatype&lt;/a&gt;, the next step is to annotate your entity class to instruct JPA to
use the custom type during mapping:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.example.jpa.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import com.example.jpa.support.HstoreUserType;

@Entity
@Table(name = &quot;books&quot;)
@TypeDef(name = &quot;hstore&quot;, typeClass = HstoreUserType.class)
public class BookEntity {

    @Column(name=&quot;metadata&quot;)
    @Type(type=&quot;hstore&quot;)
    private Map&amp;lt;String,Object&amp;gt; metadata;

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;TypeDef&lt;/code&gt; is given a name so that it can be referenced when applied to the field via the &lt;code&gt;Type&lt;/code&gt; annotation.  Now, when data is persisted or retrieved, our custom &lt;code&gt;UserType&lt;/code&gt; implementation
will be invoked to handle the data.  It is also worth noting that the &lt;a href=&quot;http://www.postgresql.org&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; JDBC driver library does come with an &lt;code&gt;HStoreConverter&lt;/code&gt; class with static methods that could be leveraged from
inside the custom &lt;code&gt;UserType&lt;/code&gt; to handle the conversion to/from a &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and vice versa.  However, I would not recommend an implementation that depends on an internal
class from the JDBC driver, as it may cause compatibility issues if you upgrade.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Rollbacks with Spring Transactions</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/20/spring_transactions_rollback.html</link>
            <pubDate>Tue, 20 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/20/spring_transactions_rollback.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, no rollback handling rules are defined if you simply add &lt;code&gt;@Transactional&lt;/code&gt; to your method.  In order for the rollback to actually be executed upon failure,
you must define one or more exceptions that you want to trigger a rollback via the &lt;code&gt;rollbackFor&lt;/code&gt; or &lt;code&gt;rollbackForClassName&lt;/code&gt; attributes of the annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Transactional(rollbackForClassName={&quot;Exception&quot;})
public void save(final Book book) {
    Author author = new Author(book.getAuthorName());
    authorRepository.saveAndFlush(author);
    bookRepository.saveAndFlush(book);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example above, the &lt;code&gt;@Transactional&lt;/code&gt; annotation makes use of the &lt;code&gt;rollbackForClassName&lt;/code&gt; attribute value to force
a database rollback if any exception of type &lt;code&gt;java.lang.Exception&lt;/code&gt; is thrown by the method (e.g. if any exception happens,
roll both save operations back).  The &lt;code&gt;rollbackForClassName&lt;/code&gt; attribute actually provides a little more flexibility than the
&lt;code&gt;rollbackFor&lt;/code&gt; attribute value.  From the &lt;code&gt;@Transactional&lt;/code&gt; JavaDoc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider carefully how specific the pattern is, and whether
to include package information (which isn&amp;#8217;t mandatory). For example,
&quot;Exception&quot; will match nearly anything, and will probably hide other rules.
&quot;java.lang.Exception&quot; would be correct if &quot;Exception&quot; was meant to define
a rule for all checked exceptions. With more unusual java.lang.Exception
names such as &quot;BaseBusinessException&quot; there is no need to use a FQN.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; org.springframework.transaction.annotation.Transactional#rollbackForClassName() JavaDoc
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, it gives you the ability to provide rules to match certain sub-strings of exception
types to better control your rollback logic.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Check Jenkins Job Status via REST API</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/13/jenkins_check_job_status.html</link>
            <pubDate>Wed, 7 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/13/jenkins_check_job_status.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a ton of &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; plugins out there that let you control when a job should run based on the status of
other builds.  However, plugins typically become out of date pretty quickly.  If you don&amp;#8217;t want to have to play
the plugin update game, you can use a little bash magic to leverage the &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; REST API to check the status
of other jobs before running your builds.  Let&amp;#8217;s assume that you have a job named &lt;code&gt;other-job&lt;/code&gt; that must be in
a success state in order for another job to execute.  You can check the status of the &lt;code&gt;other-job&lt;/code&gt; by using
the &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; REST API as part of an executed shell in the job&amp;#8217;s configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;job_status=`curl https://jenkins/view/job/other-job/lastBuild/api/json | grep &quot;\&quot;result\&quot;:\&quot;SUCCESS\&quot;&quot;`

if [ -n &quot;$job_status&quot; ]
then
    # Run your script commands here
else
  echo &quot;BUILD FAILURE: Other build is unsuccessful or status could not be obtained.&quot;
  exit 1
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; block of this other job could even do something like invoke another build that has a parameterized configuration to run your
actual build via the REST API.  This would allow you to have the job with the configuration above check the status of &lt;code&gt;other-job&lt;/code&gt; first
and then kick of a third job that actual performs the build, but only if the first job is successful, all without
installing any additional plugins.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Using CSS Parser and JSoup to Inline Styles for Web Mail</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/06/email_inline_style_jsoup_cssparser.html</link>
            <pubDate>Tue, 6 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/06/email_inline_style_jsoup_cssparser.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of an on-going project, we had a requirement to send pretty (CSS-ified) e-mails to communicate status.  Sending HTML-based e-mails from Java is pretty easy.  There
are a ton of templating engines out there that can be used to generate HTML.  However, what most people fail to realize is that most web mail providers (e.g. Gmail, Yahoo!, etc) handle a limited
subset of standard CSS.  You can find out what is supported by looking at &lt;a href=&quot;https://www.campaignmonitor.com/css/&quot; target=&quot;_blank&quot;&gt;Campaign Monitor CSS Support&lt;/a&gt;.  The first thing you might notice is that almost all of the web mail providers
do not support CSS classes.  They do, however, support inline style declarations.  Being a good developer, you know that you want to keep all of your CSS in style sheets so
that you do not have to find and replace styles in multiple templates/files.  This poses a problem if the clients can only support inline styles.  The solution?  A combination
of &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; and &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; to load and convert a style sheet into inline style declarations.  The solution in this blog post uses &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; to parse a CSS style sheet file
loaded from the classpath into a set of &lt;code&gt;CSSSytleRule&lt;/code&gt; objects.  It then uses &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; to walk the DOM in the HTML and find elements that match the rules present in the parsed style sheet.  To start, you
need to include the &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; and &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;compile &apos;org.jsoup:jsoup:1.8.1&apos;
compile &apos;net.sourceforge.cssparser:cssparser:0.9.14&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, create the &lt;code&gt;CSSOMParser&lt;/code&gt; used to parse the CSS style sheet and load the style sheet from the classpath:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.steadystate.css.parser.CSSOMParser;

import org.w3c.dom.css.CSSStyleSheet;

...

CSSOMParser parser = new CSSOMParser();
CSSStyleSheet stylesheet = parser.parseStyleSheet(new InputSource(new InputStreamReader(getClass().getResourceAsStream(&quot;/css/styles.css&quot;))), null, null);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our style sheet loaded and parsed, we can use the following code to walk the DOM and add inline style declarations
to elements that match the rules contained in the style sheet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;final Document document = Jsoup.parse(originalHtml);
final CSSRuleList rules = stylesheet.getCssRules();
final Map&amp;lt;Element, Map&amp;lt;String, String&amp;gt;&amp;gt; elementStyles = new HashMap&amp;lt;&amp;gt;();

/*
 * For each rule in the style sheet, find all HTML elements that match
 * based on its selector and store the style attributes in the map with
 * the selected element as the key.
 */
for (int i = 0; i &amp;lt; rules.getLength(); i++) {
    final CSSRule rule = rules.item(i);
    if (rule instanceof CSSStyleRule) {
        final CSSStyleRule styleRule = (CSSStyleRule) rule;
        final String selector = styleRule.getSelectorText();

        // Ignore pseudo classes, as JSoup&apos;s selector cannot handle
        // them.
        if (!selector.contains(&quot;:&quot;)) {
            final Elements selectedElements = document.select(selector);
            for (final Element selected : selectedElements) {
                if (!elementStyles.containsKey(selected)) {
                    elementStyles.put(selected, new LinkedHashMap&amp;lt;String, String&amp;gt;());
                }

                final CSSStyleDeclaration styleDeclaration = styleRule.getStyle();

                for (int j = 0; j &amp;lt; styleDeclaration.getLength(); j++) {
                    final String propertyName = styleDeclaration.item(j);
                    final String propertyValue = styleDeclaration.getPropertyValue(propertyName);
                    final Map&amp;lt;String, String&amp;gt; elementStyle = elementStyles.get(selected);
                    elementStyle.put(propertyName, propertyValue);
                }

            }
        }
    }
}

/*
 * Apply the style attributes to each element and remove the &quot;class&quot;
 * attribute.
 */
for (final Map.Entry&amp;lt;Element, Map&amp;lt;String, String&amp;gt;&amp;gt; elementEntry : elementStyles.entrySet()) {
    final Element element = elementEntry.getKey();
    final StringBuilder builder = new StringBuilder();
    for (final Map.Entry&amp;lt;String, String&amp;gt; styleEntry : elementEntry.getValue().entrySet()) {
        builder.append(styleEntry.getKey()).append(&quot;:&quot;).append(styleEntry.getValue()).append(&quot;;&quot;);
    }
    builder.append(element.attr(&quot;style&quot;));
    element.attr(&quot;style&quot;, builder.toString());
    element.removeAttr(&quot;class&quot;);
}

System.out.println(document.html());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One important thing to note in the code above is that &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; cannot handle pseudo classes in selectors.  Therefore, any
selector that contains a colon (&quot;:&quot;) is ignored.  Otherwise, each selector contained in the parsed sytle sheet is applied
to the HTML.  Inline styles are appended to each other, so ordering in your CSS stylesheet matters!  The output of the
code above is the modified HTML with all styles that could be applied converted to inline style declarations.  Now, when
this HTML is interpreted in a web mail client, it will look as it was intended to look by the developer.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
