<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Mon, 24 Mar 2014 07:37:02 -0400</pubDate>
        <lastBuildDate>Mon, 24 Mar 2014 07:37:02 -0400</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Grails and Logback</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/24/grails_logback.html</link>
            <pubDate>Mon, 24 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/24/grails_logback.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other day, I decided to attempt to switch a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application from using Log4j (the built-in option) for logging to &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt;.  The core &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; development team
maintains a &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; that appeared to be just what I needed.  I started by modifying my &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt; file
to reference the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.grails.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;logback&amp;lt;/artifactId&amp;gt;			&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;0.3.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Note that the plugin is a &lt;code&gt;binary&lt;/code&gt; plugin, so I did not need to specify the packaging as &lt;code&gt;zip&lt;/code&gt;.  If you are not using &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; support with your &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application (or are using a version of &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; that did not yet support &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; POM files), you can include
the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; in the &lt;code&gt;dependencies&lt;/code&gt; block of your &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt; and &lt;strong&gt;NOT&lt;/strong&gt; in the &lt;code&gt;plugins&lt;/code&gt; block.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, I added the following global exclusions to &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt;, per the plugin&amp;#8217;s instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/BuildConfig.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;// inherit Grails&apos; default dependencies
inherits(&quot;global&quot;) {
    excludes &apos;grails-plugin-log4j&apos;, &apos;log4j&apos;		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If any other dependencies have a runtime dependency on &lt;code&gt;log4j&lt;/code&gt;, you will need to remove it from the global excludes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_follow_the_instructions_they_said&quot;&gt;Follow the instructions, they said&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my first attempt at getting this working, I next moved on to changing the &lt;code&gt;log4j&lt;/code&gt; closure in &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; to &lt;code&gt;logback&lt;/code&gt;, as the documentation suggests.  Subsequent
digging uncovered that the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; only initializes &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; using the DSL from &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; if the application has been deployed as a WAR file
to a container.  What this means in practical terms is that when running a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application locally using the &lt;code&gt;run-app&lt;/code&gt; command, you have no control over the &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; configuration
via the DSL and thus every log statement gets printed using the default level, which is &lt;code&gt;DEBUG&lt;/code&gt; (more on this in a bit&amp;#8230;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back to my first attempt.  With &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; modified, I attempted to run my application, after performing the requisite &lt;code&gt;clean&lt;/code&gt; called out by the documentation, but
ran into compile errors related to code that was directly importing and using Log4j.  I fixed these by switching any code that explicitly imported and used the Log4J &lt;code&gt;Logger&lt;/code&gt; class to use the SLF4J &lt;code&gt;Logger&lt;/code&gt;
instead.  I next ran into some AST transformation errors with classes that had the &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt; logging &lt;code&gt;@Log4j&lt;/code&gt; annotation present.  I switched these to use the SLF4J logging annotation (&lt;code&gt;@SLF4J&lt;/code&gt;).  The
last issue that I encountered in my attempts to get the application to compile and start was related to something that &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; automatically puts in &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; when generating a
new application (&lt;strong&gt;NOTE&lt;/strong&gt;:  the application in question was built using &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; version 2.3.5).  By default, when you generate a new application, the following gets added to the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/Config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;environments {
    development {
        grails.logging.jul.usebridge = true
    }
    production {
        grails.logging.jul.usebridge = false
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which enables the use of the SLF4J JUL bridge in the local environment.  If you run the application with &lt;code&gt;grails.logging.jul.usebridge = true&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; have excluded the &lt;code&gt;grails-plugin-log4j&lt;/code&gt; dependency,
you will see the following error upon application start up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint text language-text&quot;&gt;&lt;code&gt;| Error 2014-03-11 12:43:41,282 [localhost-startStop-1] ERROR o.c.g.g.w.c.GrailsContextLoader  - Error initializing the application: org.slf4j.bridge.SLF4JBridgeHandler
java.lang.NoClassDefFoundError: org.slf4j.bridge.SLF4JBridgeHandler
    at LogbackGrailsPlugin$_closure2.doCall(LogbackGrailsPlugin.groovy:45) ~[logback-0.3.1.jar:na]
    at grails.spring.BeanBuilder.invokeBeanDefiningClosure(BeanBuilder.java:756) ~[grails-spring-2.3.5.jar:2.3.5]
    at grails.spring.BeanBuilder.beans(BeanBuilder.java:584) ~[grails-spring-2.3.5.jar:2.3.5]
    at grails.spring.BeanBuilder.invokeMethod(BeanBuilder.java:527) ~[grails-spring-2.3.5.jar:2.3.5]
    at java.util.concurrent.FutureTask.run(FutureTask.java:262) [na:1.7.0_51]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51]
    at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51]
Message: org.slf4j.bridge.SLF4JBridgeHandler
    Line | Method
-&amp;gt;&amp;gt;   45 | doCall                    in LogbackGrailsPlugin$_closure2
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    756 | invokeBeanDefiningClosure in grails.spring.BeanBuilder
|    584 | beans . . . . . . . . . . in     &apos;&apos;
|    527 | invokeMethod              in     &apos;&apos;
|    262 | run . . . . . . . . . . . in java.util.concurrent.FutureTask
|   1145 | runWorker                 in java.util.concurrent.ThreadPoolExecutor
|    615 | run . . . . . . . . . . . in java.util.concurrent.ThreadPoolExecutor$Worker
^    744 | run                       in java.lang.Thread&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fix for this is to ensure that &lt;code&gt;org.slf4j:jul-to-slf4j:1.7.5&lt;/code&gt; is included as a &lt;code&gt;runtime&lt;/code&gt; dependency.  If you are using an older version of &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt;, check the &lt;code&gt;lib&lt;/code&gt; directory
of the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; installation to determine the proper version of SLF4J to use.  Also note that if you have any dependencies that require Log4J, you may also need to add that dependency
to the classpath or remove it from the global excludes to get your application to start.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_using_logback_with_grails_run_app&quot;&gt;Using Logback with grails run-app&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s get back to the issue of the DSL only being used when the application is deployed as a WAR file.  If you take a look at the plugin descriptor for the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt;, you will notice this
little snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;LogbackGrailsPlugin.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def doWithSpring = {
    if (application.config?.grails?.logging?.jul?.usebridge) {					&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        LogManager.logManager.readConfiguration new ByteArrayInputStream(&quot;.level=INFO&quot;.bytes)
        SLF4JBridgeHandler.install()
    }

    if (application.warDeployed) {								&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        // only initialize here if deployed as a war since doWithWebDescriptor isn&apos;t called
        initLogging application
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;grails.logging.jul.usebridge&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by default in &lt;code&gt;*Config.groovy&lt;/code&gt; when creating a new &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application/plugin in 2.3.x and above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;warDeployed&lt;/code&gt; comes from an entry in &lt;code&gt;application.properties&lt;/code&gt; that is added by &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; when the WAR file is built using the &lt;code&gt;grails war&lt;/code&gt; command.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the code above, it appears that the DSL is only loaded when the WAR is deployed.  This explains why no matter how many changes I made to the DSL, none of those changes were getting picked up.
Being familiar with &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt;, I knew that if you put a &lt;code&gt;logback.groovy&lt;/code&gt; file on the classpath, &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; would automatically find and use it for configuration instead of the DSL.  To test this theory,
I put a new &lt;code&gt;logback.groovy&lt;/code&gt; file in &lt;code&gt;grails-app/conf&lt;/code&gt; to ensure it was on the classpath.  I also added the following the &lt;code&gt;grails-app/conf/BootStrap.groovy&lt;/code&gt; to verify which configuration &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; had
selected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/BootStrap.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def init = { servletContext -&amp;gt;
    StatusPrinter.print((LoggerContext) LoggerFactory.getILoggerFactory())		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Useful line of code to enable &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to print out which (if any) configuration file it loaded.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After another application restart, I noticed that &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; was still not picking up my configuration.  I did a quick check of &lt;code&gt;target/classes&lt;/code&gt; to confirm a suspicion that &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; had compiled my &lt;code&gt;logback.groovy&lt;/code&gt;
file instead of treating it like a non-source file.  Sure enough, I found &lt;code&gt;logback.class&lt;/code&gt; in &lt;code&gt;target\classes&lt;/code&gt;.  This meant that I would need to come up with a creative way to get &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; to get an
un-compiled version of the file on the classpath.  My first thought was to put some logic in &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt; to set the &lt;code&gt;logback.configurationFile&lt;/code&gt; system property supported by
&lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to the un-compiled version of &lt;code&gt;logback.groovy&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/BuildConfig.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;/*
 * If the application is being run locally, set the Logback configuration file
 * system property.  This is necessary as Grails will attempt to compile the .groovy
 * file instead of simply adding it to the classpath &quot;as is&quot;.  There is a corresponding
 * event handler in &apos;scripts/Events.groovy&apos; that takes care of making sure that the
 * Groovy configuration file makes it into the WAR in its un-compiled state.
 */
if(new File(&quot;${basedir}/grails-app/conf/logback.groovy&quot;).exists()) {
    System.setProperty(&apos;logback.configurationFile&apos;, &quot;${basedir}/grails-app/conf/logback.groovy&quot;)		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a programmatic way to force &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to use the &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;-based configuration file.  This could also be set as an JVM argument (&lt;code&gt;-Dlogback.configurationFile=...&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After adding this code and restarting the application, &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; finally found and loaded by custom configuration file.  This little trick works great when running the application using
the &lt;code&gt;run-app&lt;/code&gt; command, but I knew that I would have the same issue when building the WAR file.  To address getting the &lt;code&gt;logback.groovy&lt;/code&gt; file in to the built WAR file as an un-compiled
configuration file, I added the following to &lt;code&gt;scripts/Events.groovy&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scripts/Events.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;eventCreateWarStart = { warName, stagingDir -&amp;gt;
    ant.copy file:&quot;${basedir}/grails-app/conf/logback.groovy&quot;, todir: &quot;${stagingDir}/WEB-INF/classes&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; starts the process of building the WAR file, this script will now copy over the un-compiled &lt;code&gt;logback.groovy&lt;/code&gt; file to &lt;code&gt;classes&lt;/code&gt; folder in the WAR.  This will guarantee that the
file is on the classpath for &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to find at runtime in its un-compiled form.  After making this change, I built the WAR file and extracted it to verify the results.  Everything looked good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In retrospect, I could have easily just ditched the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; in favor of directly using the &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; dependencies, but I still would have encountered the issue with &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; compiling the
&lt;code&gt;logback.groovy&lt;/code&gt; file.  In addition I also would have lost support for the automatic &lt;code&gt;log&lt;/code&gt; property injection in controllers, tag libraries, etc that &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; provides via an AST transformation.  In my
spare time, I might attempt to make some modifications to the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; to handle using the DSL in non-WAR-deployed scenarios, which would elminate the need for a &lt;code&gt;logback.groovy&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Parsing the Grails Spring Beans DSL with Groovy</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/18/grails_bean_builder.html</link>
            <pubDate>Tue, 18 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/18/grails_bean_builder.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of a current project, I recently had the need to determine which of my &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications made use of certain &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt; beans in order to prepare for a migration.  While it is possible to
use the normal XML-based configuration in a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application (which in turn would have made parsing the configuration fairly straight forward), &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications typically make use of the built-in
&lt;a href=&quot;http://grails.org/doc/latest/guide/spring.html#springdslAdditional&quot;&gt;Spring beans DSL&lt;/a&gt; to declare their &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt; configuration.  However, because the DSL is represented in &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;, it meant that parsing it
would not be as easy as if it were in XML.  I decided that the best approach would be to use the &lt;code&gt;grails.spring.BeanBuilder&lt;/code&gt; outside of a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application in a &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt; script.  I was particularly interested
in finding beans of type &lt;code&gt;org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean&lt;/code&gt; class, which have &lt;code&gt;serviceInterface&lt;/code&gt; and &lt;code&gt;serviceUrl&lt;/code&gt; properties, so I wrote a script that loads and parses the
DSL and then loops over each bean definition for beans that contained those properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;@Grapes([
    @Grab(group=&apos;org.grails&apos;, module=&apos;grails-spring&apos;, version=&apos;2.3.6&apos;),
    @Grab(group=&apos;org.springframework&apos;, module=&apos;spring-web&apos;, version=&apos;4.0.2.RELEASE&apos;)
])

import grails.spring.BeanBuilder

// The resources.groovy file must have:
//
// beans {
//
// and not
// beans = {
//
// for this script to work!

BeanBuilder beanBuilder = new BeanBuilder()
beanBuilder.setClassLoader(this.class.classLoader)
beanBuilder.loadBeans(&apos;file:./grails-app/conf/spring/resources.groovy&apos;)

beanBuilder.springConfig.beanConfigs.each {
    if(it.value.definition.propertyValues.getPropertyValue(&apos;serviceInterface&apos;)) {
        println &quot;${it.key} -&amp;gt; ${it.value.clazz.name}&quot;
        println &quot;\tserviceUrl = ${it.value.definition.propertyValues.getPropertyValue(&apos;serviceUrl&apos;).value}&quot;
        println &quot;\tserviceInterface = ${it.value.definition.propertyValues.getPropertyValue(&apos;serviceInterface&apos;).value}&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a couple of important things to note in the example above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;grails.spring.BeanBuilder&lt;/code&gt; can be used outside of &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications by including the &lt;code&gt;org.grails:grails-spring&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;resources.groovy&lt;/code&gt; file (or any file that contains the proper DSL syntax) must have &lt;code&gt;beans&lt;/code&gt; closure be the top level of the DSL and not be a variable (i.e. beans = { &amp;#8230; ) for the script to parse the file correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the example above, I did not provide a full classpath for all of the possible beans in the file.  This means that you cannot create the application context from the builder without getting ClassNotFoundException errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command line argument parsing could be added to allow for the script to be run from anywhere and not just the root of the Grails application, as is the case in the example above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All and all, this script was pretty easy to create and can be used as part of a larger process to identify, convert and/or even re-write the &lt;code&gt;resources.groovy&lt;/code&gt; file.  Additionally, this
&lt;a href=&quot;http://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4&quot;&gt;DSL has now been incorporated directly into the Spring Framework&lt;/a&gt;), which means that not only can you now declare &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt; beans via the &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;
DSL just like in &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt;, but that you could use the same solution above to inspect that configuration outside of the application if the need should arise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails Tattletale Plugin</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/12/grails_tattletale_plugin.html</link>
            <pubDate>Wed, 12 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/12/grails_tattletale_plugin.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am pleased to announce that I have officially released the &lt;a href=&quot;http://grails.org/plugin/tattletale&quot;&gt;Grails Tattletale plugin&lt;/a&gt; to the &lt;a href=&quot;http://grails.org/plugins/&quot;&gt;Grails Plugins portal&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full documentation can be found &lt;a href=&quot;https://github.com/jdpgrailsdev/grails-tattletale/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Setting system properties when running Grails tests</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/11/grails_test_system_properties.html</link>
            <pubDate>Tue, 11 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/11/grails_test_system_properties.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application that relies on &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt; for some of its data.  This application makes use of the &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; library to connect to &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt;.  The &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; library also includes
a testing server to make it easy to write unit tests for the classes that need to interact with &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt;.  Our &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt; implementation makes uses of SASL-based authentication to prevent
unwanted access to different parts of the data stored in &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt;.  Unfortunately, the ability to set which configuration file to use when connecting to &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt; is set via JVM system
properties.  This is fine when the application is running, but can make unit testing difficult, as developers have to remember to set the appropriate system properties before executing unit
test.  Luckily, &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; has a nice events framework that fires as certain stages in execution are hit.  I decided that it would be trivial to add an event hook that listens for the
start of the test phase and sets the appropriate system properties required to simulate the same access control when interacting with the &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Apache Curator&lt;/a&gt; test server.  I made the following modification
to the &lt;code&gt;scripts/Events.groovy&lt;/code&gt; file in the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scripts/Events.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;eventTestPhaseStart = { args -&amp;gt;
    //Add the required ZooKeeper auth system properties so that tests will pass!
    System.setProperty(&apos;java.security.auth.login.config&apos;, &quot;${System.getProperty(&apos;user.dir&apos;)}/test/unit/jaas_test.config&quot;)
    System.setProperty(&apos;zookeeper.authProvider.1&apos;, &apos;org.apache.zookeeper.server.auth.SASLAuthenticationProvider&apos;)
    grailsConsole.addStatus &quot;Running tests with the following system properties:&quot;
    grailsConsole.addStatus &quot;${System.getProperties()}&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above event is fired right before the first test is executed by &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; when using the &lt;code&gt;grails test-app&lt;/code&gt; command.  It sets the login configuration file to
one that is packaged within the project and sets the &lt;code&gt;authProvider&lt;/code&gt; to the appropriate type (in our case, SASL).  There are many other events that you can listen
for in order to perform logic upon firing.  You can see more information about &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; events in the &lt;a href=&quot;http://grails.org/doc/2.3.x/guide/commandLine.html#events&quot;&gt;documentation&lt;/a&gt; or
by looking through the &lt;a href=&quot;http://gant.codehaus.org/&quot;&gt;Gant&lt;/a&gt; scripts in the &lt;code&gt;scripts&lt;/code&gt; folder of the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; installation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Integrating JBoss tattletale with Grails</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/04/grails_tattletale.html</link>
            <pubDate>Tue, 4 Mar 2014 00:00:00 -0500</pubDate>
            <guid isPermaLink="false">/2014/03/04/grails_tattletale.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prior to version 2.3 of the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; Framework, it was difficult, if not impossible, to use &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; to build a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt;-based application or plugin.  Besides losing the obvious benefits of &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;-based builds,
such as dependency management and the rich ecosystem of existing plugins, one of the things that is lacking is an easy way to enforce environmental constraints, such as with the &lt;a href=&quot;http://maven.apache.org/enforcer/maven-enforcer-plugin/&quot;&gt;Maven Enforcer plugin&lt;/a&gt;. The &lt;a href=&quot;http://maven.apache.org/enforcer/maven-enforcer-plugin/&quot;&gt;Maven Enforcer plugin&lt;/a&gt;
includes the ability to &lt;a href=&quot;http://mojo.codehaus.org/extra-enforcer-rules/banDuplicateClasses.html&quot;&gt;fail a build when detecting multiple versions of the same class on the classpath&lt;/a&gt;.  This is particularly handy when an
application depends on libraries that include classes from another library in order to reduce the number of required dependencies (this is particularly common with libraries that are not published to a &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;
repository or some other type of dependency management repository).  Since using the &lt;a href=&quot;http://maven.apache.org/enforcer/maven-enforcer-plugin/&quot;&gt;Maven Enforcer plugin&lt;/a&gt; is not an option in applications using &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; &amp;lt;2.3, I decided to look at other alternatives to provide the
duplicate class checking functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jboss_tattletale&quot;&gt;JBoss tattletale&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jboss.org/tattletale&quot;&gt;JBoss tattletale&lt;/a&gt; is a similar project to the &lt;a href=&quot;http://maven.apache.org/enforcer/maven-enforcer-plugin/&quot;&gt;Maven Enforcer plugin&lt;/a&gt; in that it provides many of the same analytics with regards to the classes and dependencies that are part of a Java library/application.  In addition to its
feature set, &lt;a href=&quot;http://www.jboss.org/tattletale&quot;&gt;JBoss tattletale&lt;/a&gt; also has the ability to be embedded/called programmatically, which is a must for integrating it into a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; &lt;a href=&quot;http://gant.codehaus.org/&quot;&gt;Gant&lt;/a&gt; script.  The first step to including a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; command line target
that can perform the &lt;a href=&quot;http://www.jboss.org/tattletale&quot;&gt;JBoss tattletale&lt;/a&gt; analysis is to include the &lt;a href=&quot;http://www.jboss.org/tattletale&quot;&gt;JBoss tattletale&lt;/a&gt; dependency as a &lt;code&gt;build&lt;/code&gt; scoped dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;BuildConfig.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;grails.project.dependency.resolution = {

    ...

    dependencies {

        // Required to generate the TattleTale report by the TattleTale GANT script.
        build &apos;org.jboss.tattletale:tattletale:1.1.2.Final&apos;

        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This makes the dependency available to the &lt;a href=&quot;http://gant.codehaus.org/&quot;&gt;Gant&lt;/a&gt; script without exporting the dependency when the application or plugin is package (or in the case of a plugin, the dependency is not added to the classpath when it is
consumed by a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application).  The next step is to write a &lt;a href=&quot;http://gant.codehaus.org/&quot;&gt;Gant&lt;/a&gt; script that performs the &lt;a href=&quot;http://www.jboss.org/tattletale&quot;&gt;JBoss tattletale&lt;/a&gt; analysis.  Below is an example script that I wrote that expands the packaged application, runs the analysis
and then outputs the HTML report to the &lt;code&gt;target/tattletale-report&lt;/code&gt; directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scripts/TattleTale.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;import org.jboss.tattletale.Main

includeTargets &amp;lt;&amp;lt; grailsScript(&quot;_GrailsArgParsing&quot;)
includeTargets &amp;lt;&amp;lt; grailsScript(&quot;_GrailsSettings&quot;)
includeTargets &amp;lt;&amp;lt; grailsScript(&quot;_GrailsClasspath&quot;)

// Default list of comma separated report names to generate.
DEFAULT_REPORTS=&apos;multiplejars&apos;

// Default list of comma separated JAR files to exclude.  These JARS are from the Grails global dependencies,
// so there is not a lot we can do about resolving duplicate classes from the JAR files.
DEFAULT_EXCLUDES=&apos;commons-beanutils-1.8.3.jar,commons-logging-1.1.1.jar,aspectjrt-1.6.10.jar,grails-plugin-controllers-2.0.3.jar&apos;

/*
 * Target used to generated the TattleTale (http://www.jboss.org/tattletale/) report for the encapsulating Grails application.
 * The application&apos;s archive (WAR file) MUST be built prior to running this script to invoke the TattleTale report.  If
 * the WAR file is present, the following steps are performed:
 *
 *     1) The previous report is deleted.
 *     2) The archive is unzipped to the target directory of the application.
 *     3) The TattleTale report(s) are generated.
 *     4) The expanded archive is deleted.
 *
 * The TattleTale reports that are generated can be configured by running the script with the following option:
 *
 *     grails tattleTale --reports=mulitplelocations,multiplejars
 *
 * The files that are scanned by TattleTale can be configured by adding additional exclusions via an argument:
 *
 *     grails tattleTale --excludes=foo.jar,bar.jar
 *
 * See the TattleTale User&apos;s Guide for information about the available reports (http://docs.jboss.org/tattletale/userguide/1.1/html_single/#maven_report).
 */
target(tattleTale: &quot;Called from build jobs on Hudson to perform a TattleTale analysis on the application&apos;s archive.&quot;) {
    parseArguments()

    def appName = metadata[&apos;app.name&apos;]
    def reports = argsMap.reports ?: DEFAULT_REPORTS
    def excludes = argsMap.excludes ? &quot;${DEFAULT_EXCLUDES},${argsMap.excludes}&quot; : DEFAULT_EXCLUDES
    def archiveFile = &quot;target/${appName}.war&quot;
    def expandedArchiveDir = &quot;target/${appName}&quot;
    def reportDir = &apos;target/tattletale-report&apos;

    if(new File(archiveFile).exists()) {
        ant.delete(dir:reportDir, failonerror:&quot;false&quot;, verbose:&quot;true&quot;)
        grailsConsole.addStatus &quot;************ Unzipping application archive &apos;${archiveFile}&apos;...&quot;
        ant.unzip(src: archiveFile , dest:expandedArchiveDir, overwrite:&quot;true&quot;)
        grailsConsole.addStatus &quot;************ Running TattleTask report for &apos;${appName}&apos;...&quot;
        executeTattleTale(&quot;${expandedArchiveDir}/WEB-INF/lib&quot;, reportDir, reports, excludes)
        grailsConsole.addStatus &quot;************ Removing expanded archive for application &apos;${appName}&apos;...&quot;
        ant.delete(dir:expandedArchiveDir, failonerror:&quot;false&quot;, verbose:&quot;true&quot;)
        grailsConsole.addStatus &quot;************ Duplicate class check for application &apos;${appName}&apos; completed.&quot;
        grailsConsole.addStatus &quot;************ TattleTale report available in &apos;${new File(reportDir).absolutePath}/index.html&apos;...&quot;
    } else {
        grailsConsole.warn &quot;Application archive file ${archiveFile} does NOT exist.  Nothing to report!  Please build the WAR file before running this script.&quot;
    }
}

/**
 * Executes the TattleTale report.
 * @param source The source directory containing JAR files.
 * @param destination The output destination directory for the generated report(s).
 * @param reports The comma separated string containing the names of the reports to generate.
 * @param excludes The comma separated string containing the names of directories or files to exludes
 */
private def executeTattleTale(def source, def destination, def reports, def excludes) {
    def tattleTale = new Main()
    tattleTale.source = source
    tattleTale.destination = destination
    tattleTale.reports = reports
    tattleTale.excludes = excludes
    tattleTale.profiles = &apos;spring30,java6&apos;
    tattleTale.execute()
}

setDefaultTarget(tattleTale)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the script above requires the user to first run &lt;code&gt;grails war&lt;/code&gt; or &lt;code&gt;grails package-plugin&lt;/code&gt; prior to running the &lt;code&gt;grails tattletale&lt;/code&gt; target command.  It is also possible to hook into the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; events that get fired to perform the analysis after
compilation has been completed, which would avoid the need to expand the packaged WAR file.  Regardless of how you choose to implement the execution of &lt;a href=&quot;http://www.jboss.org/tattletale&quot;&gt;JBoss tattletale&lt;/a&gt;, the end result is still valuable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
