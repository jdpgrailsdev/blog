<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Sat, 12 Apr 2014 19:04:54 -0400</pubDate>
        <lastBuildDate>Sat, 12 Apr 2014 19:04:54 -0400</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Using the New Relic agent with Spring-Boot and Gradle</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/04/08/spring_boot_gradle_newrelic.html</link>
            <pubDate>Tue, 8 Apr 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/04/08/spring_boot_gradle_newrelic.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to play around with &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; the other day and found it pretty easy to get up and running using their &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; plugin.  After only a few minutes, I had a sample Spring-based web application running as a stand-alone process.  Next, I thought I would add in &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; support so I could see some performance stats.  Normally, you would install the &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent in your application container or add a &lt;code&gt;javaagent&lt;/code&gt; JVM option pointing at the &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent to enable metrics gathering.  In my first attempt, I added the &lt;code&gt;javaagent&lt;/code&gt; JVM option pointing at the &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent to the &lt;code&gt;DEFAULT_JVM_OPTS&lt;/code&gt; variable in my &lt;code&gt;gradlew&lt;/code&gt; script and restarted the application.  It failed with a weird error about not being able to find some of the classes provided by the &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent after claiming that it started the agent and found the YAML configuration file.  It seemed like there was obviously some issue between &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; and the Java agent.  After a
few quick minutes searching on the internets, I found that the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; plugin supports passing an agent to the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; process.  I made the following change to my
&lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;apply plugin: &apos;spring-boot&apos;

...

springBoot {
    mainClass = &apos;com.sample.Application&apos;
    agent = file(&apos;/opt/newrelic/newrelic.jar&apos;)			&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the path to where ever you downloaded and the &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent JAR to that should include your customized YAML configuration file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I restarted my application using the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; task (&lt;code&gt;run&lt;/code&gt;) and metrics started flowing!  This is great, but it depends on a hard-coded path to the installed &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent (yuck).
Because you can do anything with &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; (slight exaggeration), I figured that with some &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt;-foo, I could include the &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent as a dependency, download it and point to the
downloaded file for the &lt;code&gt;javaagent&lt;/code&gt; JVM option.  After a little playing around, I came up with the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;apply plugin: &apos;groovy&apos;
apply plugin: &apos;spring-boot&apos;

group = &apos;com.test&apos;
version = &apos;1.0.0-SNAPSHOT&apos;

description = &quot;&quot;&quot;Test application&quot;&quot;&quot;

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url &quot;http://repo.spring.io/snapshot&quot; }
        maven { url &quot;http://repo.spring.io/milestone&quot; }
    }
    dependencies {
        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.0.1.BUILD-SNAPSHOT&quot;)
    }
}

configurations {
    newrelic	// Custom configuration to allow for the copying of the New Relic agent at run time.
}

ext {
    groovyVersion=&apos;2.2.1&apos;
    newrelicVersion=&apos;3.5.1&apos;
    springBootVersion=&apos;1.0.1.RELEASE&apos;
    springVersion=&apos;4.0.3.RELEASE&apos;
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    newrelic &quot;com.newrelic.agent.java:newrelic-agent:${newrelicVersion}&quot;

    compile(&quot;org.codehaus.groovy:groovy-all:${groovyVersion}&quot;)
    compile(&quot;org.springframework:spring-beans:${springVersion}&quot;)
    compile(&quot;org.springframework:spring-context:${springVersion}&quot;)
    compile(&quot;org.springframework.boot:spring-boot-starter-web:${springBootVersion}&quot;)

    testCompile(&quot;org.springframework.boot:spring-boot-starter-test:${springBootVersion}&quot;)
}

task copyAgent(type: Copy) {
    from {
        configurations.newrelic				&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }
    into &quot;$buildDir/lib&quot;
    rename (&quot;newrelic-agent-${newrelicVersion}.jar&quot;, &apos;newrelic.jar&apos;)
}

springBoot {
    mainClass = &apos;com.test.sample.Application&apos;
    agent = file(&quot;$buildDir/lib/newrelic.jar&quot;)		&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
}

project.tasks.run.dependsOn([copyAgent])			&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Per the &lt;code&gt;dependencies&lt;/code&gt; block, the only file in the &lt;code&gt;newrelic&lt;/code&gt; configuration is the agent JAR itself.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Tell &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; to use the the downloaded, copied &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent JAR instead of the previously hard-coded value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Make the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; &lt;code&gt;run&lt;/code&gt; task depend on the copy task to ensure that the agent is copied before we attempt to launch the application.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, the last thing that I did was set up a symbolic link from my project&amp;#8217;s directory to where my &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; YAML file resides.  The &lt;a href=&quot;http://newrelic.com&quot;&gt;New Relic&lt;/a&gt; agent will
automatically look for the &lt;code&gt;newrelic.yml&lt;/code&gt; file in the same location as the agent JAR or in the current working directory.  With this last piece in place, all
hard-coded paths are now removed from the equation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Maven, the JavaDoc plugin and Java 8</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/04/03/maven_java8_javadoc.html</link>
            <pubDate>Thu, 3 Apr 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/04/03/maven_java8_javadoc.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On March 18th, Oracle officially released &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;.  Eager to start using some of the new features (in a non-beta release), I quickly downloaded and installed the JDK on my laptop.  I switched my
system to use &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt; by default and set upon compiling one of my projects.  To my suprise, the build failed with a bunch of errors that looked like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:2.8.1:jar (default) on project ddc-metrics-annotations: MavenReportException: Error while creating archive:
[ERROR] Exit code: 1 - /Projects/libraries/test-library/src/main/java/com/test/Tester.java:30: warning: no @return&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It turns out that &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt; includes a much more strict set of rules for its doclint.  According to  &lt;a href=&quot;http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html&quot;&gt;Steven Colebourne&lt;/a&gt;, the
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt; doclint by default enforces the following rules when processing JavaDoc comments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No self-closed HTML tags, such as &amp;lt;br /&amp;gt; or &amp;lt;a id=&quot;x&quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No unclosed HTML tags, such as &amp;lt;ul&amp;gt; without matching &amp;lt;/ul&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No invalid HTML end tags, such as &amp;lt;/br&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No invalid HTML attributes, based on doclint&amp;#8217;s interpretation of W3C HTML 4.01&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No duplicate HTML id attribute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No empty HTML href attribute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No incorrectly nested headers, such as class documentation must have &amp;lt;h3&amp;gt;, not &amp;lt;h4&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No invalid HTML tags, such as List&amp;lt;String&amp;gt; (where you forgot to escape using &amp;lt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No broken @link references&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No broken @param references, they must match the actual parameter name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No broken @throws references, the first word must be a class name&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is fine if you are starting with a green field project, but if you are like me and have to switch between new and legacy code bases, it may not be possible to correct all of these
issues in order to get &lt;a href=&quot;http://maven.apache.org/plugins/maven-javadoc-plugin/&quot;&gt;Maven JavaDoc plugin&lt;/a&gt; generated using &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;.  Per &lt;a href=&quot;http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html&quot;&gt;Steven Colebourne&amp;#8217;s blog&lt;/a&gt;, the solution is to
include the &lt;code&gt;-Xdoclint:none&lt;/code&gt; JVM argument in the configuration of the &lt;a href=&quot;http://maven.apache.org/plugins/maven-javadoc-plugin/&quot;&gt;Maven JavaDoc plugin&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;...
&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.9.1&amp;lt;/version&amp;gt;
    &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
            &amp;lt;goals&amp;gt;
                &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;additionalparam&amp;gt;-Xdoclint:none&amp;lt;/additionalparam&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works great when building with &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;.  However, if you switch back to Java 7 and attempt to build with the &lt;code&gt;-Xdoclint:none&lt;/code&gt; JVM argument, the build will fail, as Java 7 does not
recognize that JVM argument.  What can we do to support JavaDoc generation via &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; for both Java 7 and Java 8 on a legacy code base?  Use
&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-profiles.html&quot;&gt;Maven profiles&lt;/a&gt;!  Instead of modifying the existing &lt;a href=&quot;http://maven.apache.org/plugins/maven-javadoc-plugin/&quot;&gt;Maven JavaDoc plugin&lt;/a&gt; declaration in our &lt;code&gt;pom.xml&lt;/code&gt; file, let&amp;#8217;s instead
add a new profile that only activates when we are building with &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;com.test&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;test&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;

    &amp;lt;build&amp;gt;
        ...
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.9.1&amp;lt;/version&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;

    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;java8&amp;lt;/id&amp;gt;
        &amp;lt;activation&amp;gt;
            &amp;lt;jdk&amp;gt;1.8&amp;lt;/jdk&amp;gt;								&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &amp;lt;/activation&amp;gt;
        &amp;lt;build&amp;gt;
            &amp;lt;plugins&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;maven-javadoc-plugin&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;2.9.1&amp;lt;/version&amp;gt;
                    &amp;lt;executions&amp;gt;
                        &amp;lt;execution&amp;gt;
                            &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
                            &amp;lt;goals&amp;gt;
                                &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt;
                            &amp;lt;/goals&amp;gt;
                            &amp;lt;configuration&amp;gt;
                                &amp;lt;additionalparam&amp;gt;-Xdoclint:none&amp;lt;/additionalparam&amp;gt;
                            &amp;lt;/configuration&amp;gt;
                        &amp;lt;/execution&amp;gt;
                    &amp;lt;/executions&amp;gt;
                &amp;lt;/plugin&amp;gt;
            &amp;lt;/plugins&amp;gt;
        &amp;lt;/build&amp;gt;
    &amp;lt;/profile&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Will activate this profile if the JRE that is executing the &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; build is version 1.8 (&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now safely build our project with either Java 7 or &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt; without having it fail due to either the more strict doclint rules in &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt; or the fact that Java 7 does not recognize
the JVM argument.  I&amp;#8217;m sure that this is not the last of these issues that will come up with regards to changes between previous versions of Java and &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;.  Luckily, we should be able
to apply the same profile trick for any differences until such a time that all the different code bases that you support are converted to use &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails and Logback</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/24/grails_logback.html</link>
            <pubDate>Mon, 24 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/24/grails_logback.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other day, I decided to attempt to switch a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application from using Log4j (the built-in option) for logging to &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt;.  The core &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; development team
maintains a &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; that appeared to be just what I needed.  I started by modifying my &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt; file
to reference the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.grails.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;logback&amp;lt;/artifactId&amp;gt;			&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;version&amp;gt;0.3.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Note that the plugin is a &lt;code&gt;binary&lt;/code&gt; plugin, so I did not need to specify the packaging as &lt;code&gt;zip&lt;/code&gt;.  If you are not using &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; support with your &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application (or are using a version of &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; that did not yet support &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; POM files), you can include
the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; in the &lt;code&gt;dependencies&lt;/code&gt; block of your &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt; and &lt;strong&gt;NOT&lt;/strong&gt; in the &lt;code&gt;plugins&lt;/code&gt; block.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, I added the following global exclusions to &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt;, per the plugin&amp;#8217;s instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/BuildConfig.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;// inherit Grails&apos; default dependencies
inherits(&quot;global&quot;) {
    excludes &apos;grails-plugin-log4j&apos;, &apos;log4j&apos;		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If any other dependencies have a runtime dependency on &lt;code&gt;log4j&lt;/code&gt;, you will need to remove it from the global excludes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_follow_the_instructions_they_said&quot;&gt;Follow the instructions, they said&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my first attempt at getting this working, I next moved on to changing the &lt;code&gt;log4j&lt;/code&gt; closure in &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; to &lt;code&gt;logback&lt;/code&gt;, as the documentation suggests.  Subsequent
digging uncovered that the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; only initializes &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; using the DSL from &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; if the application has been deployed as a WAR file
to a container.  What this means in practical terms is that when running a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application locally using the &lt;code&gt;run-app&lt;/code&gt; command, you have no control over the &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; configuration
via the DSL and thus every log statement gets printed using the default level, which is &lt;code&gt;DEBUG&lt;/code&gt; (more on this in a bit&amp;#8230;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back to my first attempt.  With &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; modified, I attempted to run my application, after performing the requisite &lt;code&gt;clean&lt;/code&gt; called out by the documentation, but
ran into compile errors related to code that was directly importing and using Log4j.  I fixed these by switching any code that explicitly imported and used the Log4J &lt;code&gt;Logger&lt;/code&gt; class to use the SLF4J &lt;code&gt;Logger&lt;/code&gt;
instead.  I next ran into some AST transformation errors with classes that had the &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt; logging &lt;code&gt;@Log4j&lt;/code&gt; annotation present.  I switched these to use the SLF4J logging annotation (&lt;code&gt;@SLF4J&lt;/code&gt;).  The
last issue that I encountered in my attempts to get the application to compile and start was related to something that &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; automatically puts in &lt;code&gt;grails-app/conf/Config.groovy&lt;/code&gt; when generating a
new application (&lt;strong&gt;NOTE&lt;/strong&gt;:  the application in question was built using &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; version 2.3.5).  By default, when you generate a new application, the following gets added to the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/Config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;environments {
    development {
        grails.logging.jul.usebridge = true
    }
    production {
        grails.logging.jul.usebridge = false
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which enables the use of the SLF4J JUL bridge in the local environment.  If you run the application with &lt;code&gt;grails.logging.jul.usebridge = true&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; have excluded the &lt;code&gt;grails-plugin-log4j&lt;/code&gt; dependency,
you will see the following error upon application start up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint text language-text&quot;&gt;&lt;code&gt;| Error 2014-03-11 12:43:41,282 [localhost-startStop-1] ERROR o.c.g.g.w.c.GrailsContextLoader  - Error initializing the application: org.slf4j.bridge.SLF4JBridgeHandler
java.lang.NoClassDefFoundError: org.slf4j.bridge.SLF4JBridgeHandler
    at LogbackGrailsPlugin$_closure2.doCall(LogbackGrailsPlugin.groovy:45) ~[logback-0.3.1.jar:na]
    at grails.spring.BeanBuilder.invokeBeanDefiningClosure(BeanBuilder.java:756) ~[grails-spring-2.3.5.jar:2.3.5]
    at grails.spring.BeanBuilder.beans(BeanBuilder.java:584) ~[grails-spring-2.3.5.jar:2.3.5]
    at grails.spring.BeanBuilder.invokeMethod(BeanBuilder.java:527) ~[grails-spring-2.3.5.jar:2.3.5]
    at java.util.concurrent.FutureTask.run(FutureTask.java:262) [na:1.7.0_51]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_51]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_51]
    at java.lang.Thread.run(Thread.java:744) [na:1.7.0_51]
Message: org.slf4j.bridge.SLF4JBridgeHandler
    Line | Method
-&amp;gt;&amp;gt;   45 | doCall                    in LogbackGrailsPlugin$_closure2
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    756 | invokeBeanDefiningClosure in grails.spring.BeanBuilder
|    584 | beans . . . . . . . . . . in     &apos;&apos;
|    527 | invokeMethod              in     &apos;&apos;
|    262 | run . . . . . . . . . . . in java.util.concurrent.FutureTask
|   1145 | runWorker                 in java.util.concurrent.ThreadPoolExecutor
|    615 | run . . . . . . . . . . . in java.util.concurrent.ThreadPoolExecutor$Worker
^    744 | run                       in java.lang.Thread&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fix for this is to ensure that &lt;code&gt;org.slf4j:jul-to-slf4j:1.7.5&lt;/code&gt; is included as a &lt;code&gt;runtime&lt;/code&gt; dependency.  If you are using an older version of &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt;, check the &lt;code&gt;lib&lt;/code&gt; directory
of the &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; installation to determine the proper version of SLF4J to use.  Also note that if you have any dependencies that require Log4J, you may also need to add that dependency
to the classpath or remove it from the global excludes to get your application to start.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_using_logback_with_grails_run_app&quot;&gt;Using Logback with grails run-app&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s get back to the issue of the DSL only being used when the application is deployed as a WAR file.  If you take a look at the plugin descriptor for the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt;, you will notice this
little snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;LogbackGrailsPlugin.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def doWithSpring = {
    if (application.config?.grails?.logging?.jul?.usebridge) {					&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        LogManager.logManager.readConfiguration new ByteArrayInputStream(&quot;.level=INFO&quot;.bytes)
        SLF4JBridgeHandler.install()
    }

    if (application.warDeployed) {								&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        // only initialize here if deployed as a war since doWithWebDescriptor isn&apos;t called
        initLogging application
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;grails.logging.jul.usebridge&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; by default in &lt;code&gt;*Config.groovy&lt;/code&gt; when creating a new &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application/plugin in 2.3.x and above.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;warDeployed&lt;/code&gt; comes from an entry in &lt;code&gt;application.properties&lt;/code&gt; that is added by &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; when the WAR file is built using the &lt;code&gt;grails war&lt;/code&gt; command.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the code above, it appears that the DSL is only loaded when the WAR is deployed.  This explains why no matter how many changes I made to the DSL, none of those changes were getting picked up.
Being familiar with &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt;, I knew that if you put a &lt;code&gt;logback.groovy&lt;/code&gt; file on the classpath, &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; would automatically find and use it for configuration instead of the DSL.  To test this theory,
I put a new &lt;code&gt;logback.groovy&lt;/code&gt; file in &lt;code&gt;grails-app/conf&lt;/code&gt; to ensure it was on the classpath.  I also added the following the &lt;code&gt;grails-app/conf/BootStrap.groovy&lt;/code&gt; to verify which configuration &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; had
selected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/BootStrap.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def init = { servletContext -&amp;gt;
    StatusPrinter.print((LoggerContext) LoggerFactory.getILoggerFactory())		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Useful line of code to enable &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to print out which (if any) configuration file it loaded.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After another application restart, I noticed that &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; was still not picking up my configuration.  I did a quick check of &lt;code&gt;target/classes&lt;/code&gt; to confirm a suspicion that &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; had compiled my &lt;code&gt;logback.groovy&lt;/code&gt;
file instead of treating it like a non-source file.  Sure enough, I found &lt;code&gt;logback.class&lt;/code&gt; in &lt;code&gt;target\classes&lt;/code&gt;.  This meant that I would need to come up with a creative way to get &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; to get an
un-compiled version of the file on the classpath.  My first thought was to put some logic in &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt; to set the &lt;code&gt;logback.configurationFile&lt;/code&gt; system property supported by
&lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to the un-compiled version of &lt;code&gt;logback.groovy&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;grails-app/conf/BuildConfig.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;/*
 * If the application is being run locally, set the Logback configuration file
 * system property.  This is necessary as Grails will attempt to compile the .groovy
 * file instead of simply adding it to the classpath &quot;as is&quot;.  There is a corresponding
 * event handler in &apos;scripts/Events.groovy&apos; that takes care of making sure that the
 * Groovy configuration file makes it into the WAR in its un-compiled state.
 */
if(new File(&quot;${basedir}/grails-app/conf/logback.groovy&quot;).exists()) {
    System.setProperty(&apos;logback.configurationFile&apos;, &quot;${basedir}/grails-app/conf/logback.groovy&quot;)		&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a programmatic way to force &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to use the &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;-based configuration file.  This could also be set as an JVM argument (&lt;code&gt;-Dlogback.configurationFile=...&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After adding this code and restarting the application, &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; finally found and loaded by custom configuration file.  This little trick works great when running the application using
the &lt;code&gt;run-app&lt;/code&gt; command, but I knew that I would have the same issue when building the WAR file.  To address getting the &lt;code&gt;logback.groovy&lt;/code&gt; file in to the built WAR file as an un-compiled
configuration file, I added the following to &lt;code&gt;scripts/Events.groovy&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;scripts/Events.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;eventCreateWarStart = { warName, stagingDir -&amp;gt;
    ant.copy file:&quot;${basedir}/grails-app/conf/logback.groovy&quot;, todir: &quot;${stagingDir}/WEB-INF/classes&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; starts the process of building the WAR file, this script will now copy over the un-compiled &lt;code&gt;logback.groovy&lt;/code&gt; file to &lt;code&gt;classes&lt;/code&gt; folder in the WAR.  This will guarantee that the
file is on the classpath for &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; to find at runtime in its un-compiled form.  After making this change, I built the WAR file and extracted it to verify the results.  Everything looked good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In retrospect, I could have easily just ditched the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; in favor of directly using the &lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; dependencies, but I still would have encountered the issue with &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; compiling the
&lt;code&gt;logback.groovy&lt;/code&gt; file.  In addition I also would have lost support for the automatic &lt;code&gt;log&lt;/code&gt; property injection in controllers, tag libraries, etc that &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; provides via an AST transformation.  In my
spare time, I might attempt to make some modifications to the &lt;a href=&quot;http://grails.org/plugin/logback&quot;&gt;Grails Logback Plugin&lt;/a&gt; to handle using the DSL in non-WAR-deployed scenarios, which would elminate the need for a &lt;code&gt;logback.groovy&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Parsing the Grails Spring Beans DSL with Groovy</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/18/grails_bean_builder.html</link>
            <pubDate>Tue, 18 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/18/grails_bean_builder.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of a current project, I recently had the need to determine which of my &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications made use of certain &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt; beans in order to prepare for a migration.  While it is possible to
use the normal XML-based configuration in a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application (which in turn would have made parsing the configuration fairly straight forward), &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications typically make use of the built-in
&lt;a href=&quot;http://grails.org/doc/latest/guide/spring.html#springdslAdditional&quot;&gt;Spring beans DSL&lt;/a&gt; to declare their &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt; configuration.  However, because the DSL is represented in &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;, it meant that parsing it
would not be as easy as if it were in XML.  I decided that the best approach would be to use the &lt;code&gt;grails.spring.BeanBuilder&lt;/code&gt; outside of a &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; application in a &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt; script.  I was particularly interested
in finding beans of type &lt;code&gt;org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean&lt;/code&gt; class, which have &lt;code&gt;serviceInterface&lt;/code&gt; and &lt;code&gt;serviceUrl&lt;/code&gt; properties, so I wrote a script that loads and parses the
DSL and then loops over each bean definition for beans that contained those properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;@Grapes([
    @Grab(group=&apos;org.grails&apos;, module=&apos;grails-spring&apos;, version=&apos;2.3.6&apos;),
    @Grab(group=&apos;org.springframework&apos;, module=&apos;spring-web&apos;, version=&apos;4.0.2.RELEASE&apos;)
])

import grails.spring.BeanBuilder

// The resources.groovy file must have:
//
// beans {
//
// and not
// beans = {
//
// for this script to work!

BeanBuilder beanBuilder = new BeanBuilder()
beanBuilder.setClassLoader(this.class.classLoader)
beanBuilder.loadBeans(&apos;file:./grails-app/conf/spring/resources.groovy&apos;)

beanBuilder.springConfig.beanConfigs.each {
    if(it.value.definition.propertyValues.getPropertyValue(&apos;serviceInterface&apos;)) {
        println &quot;${it.key} -&amp;gt; ${it.value.clazz.name}&quot;
        println &quot;\tserviceUrl = ${it.value.definition.propertyValues.getPropertyValue(&apos;serviceUrl&apos;).value}&quot;
        println &quot;\tserviceInterface = ${it.value.definition.propertyValues.getPropertyValue(&apos;serviceInterface&apos;).value}&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a couple of important things to note in the example above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;grails.spring.BeanBuilder&lt;/code&gt; can be used outside of &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt; applications by including the &lt;code&gt;org.grails:grails-spring&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;resources.groovy&lt;/code&gt; file (or any file that contains the proper DSL syntax) must have &lt;code&gt;beans&lt;/code&gt; closure be the top level of the DSL and not be a variable (i.e. beans = { &amp;#8230; ) for the script to parse the file correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the example above, I did not provide a full classpath for all of the possible beans in the file.  This means that you cannot create the application context from the builder without getting ClassNotFoundException errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command line argument parsing could be added to allow for the script to be run from anywhere and not just the root of the Grails application, as is the case in the example above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All and all, this script was pretty easy to create and can be used as part of a larger process to identify, convert and/or even re-write the &lt;code&gt;resources.groovy&lt;/code&gt; file.  Additionally, this
&lt;a href=&quot;http://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4&quot;&gt;DSL has now been incorporated directly into the Spring Framework&lt;/a&gt;), which means that not only can you now declare &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt; beans via the &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;
DSL just like in &lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt;, but that you could use the same solution above to inspect that configuration outside of the application if the need should arise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails Tattletale Plugin</title>
            <link>http://jdpgrailsdev.github.io/blog//2014/03/12/grails_tattletale_plugin.html</link>
            <pubDate>Wed, 12 Mar 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">/2014/03/12/grails_tattletale_plugin.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am pleased to announce that I have officially released the &lt;a href=&quot;http://grails.org/plugin/tattletale&quot;&gt;Grails Tattletale plugin&lt;/a&gt; to the &lt;a href=&quot;http://grails.org/plugins/&quot;&gt;Grails Plugins portal&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full documentation can be found &lt;a href=&quot;https://github.com/jdpgrailsdev/grails-tattletale/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
