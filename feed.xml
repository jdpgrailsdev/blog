<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Tue, 12 Aug 2014 10:44:18 -0400</pubDate>
        <lastBuildDate>Tue, 12 Aug 2014 10:44:18 -0400</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Dynamically Build JavaExec Classpath from BuildScript Dependencies in Gradle</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/08/12/gradle_javaexec_classpath.html</link>
            <pubDate>Tue, 12 Aug 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/08/12/gradle_javaexec_classpath.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, I have been working on a few &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; plugins that use the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html&quot; target=&quot;_blank&quot;&gt;Gradle JavaExec Task&lt;/a&gt;
to execute a Java main class from within the plugin.  This is pretty straightforward and not at all interesting.  However, in testing the plugin, I realized that I did not
want to expose the required dependencies needed to run the main class outside of the plugin.  If I did, I would require each project that applies my plugin to list the
dependencies in its &lt;code&gt;dependencies&lt;/code&gt; block.  This is obviously a leaky abstraction, so I decided to see if I could programmatically set the classpath of the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html&quot; target=&quot;_blank&quot;&gt;Gradle JavaExec Task&lt;/a&gt;
to us use the plugin&amp;#8217;s dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;task generate(type: JavaExec) {
    main = &apos;com.example.Generator&apos;
    args = [&apos;arg1&apos;, &apos;arg2&apos;]
    classpath = buildscript.configurations.classpath
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example above, the task&amp;#8217;s classpath is set to the classpath created by the &lt;code&gt;buildscript&lt;/code&gt; DSL, which includes my plugin dependency and all of its transitive dependencies (unless
you disable transitive resolution when you define the plugin dependency).  This worked great until I used my plugin as part of a multi-module project, where the plugin dependency
is declared and applied in the root project, but the task is executed on the sub-project.  What happened is that the above example only loaded the build script classpath for
the current project (the sub-project), which did not have the plugin dependency on its classpath (apparently, the build script classpath is not additive/transitive).  I addressed
this by writing a little recursive function to traverse up the project tree and add the dependencies from each build script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;task generate(type: JavaExec) {
    main = &apos;com.example.Generator&apos;
    args = [&apos;arg1&apos;, &apos;arg2&apos;]
    classpath = files(getClasspath(project))
}

private List&amp;lt;File&amp;gt; getClasspath(project, classpath=[]) {
    if(project == null || project == project.rootProject) {
        classpath
    } else {
        classpath.addAll(project.buildscript.configurations.classpath.getFiles())
        getClasspath(project.rootProject, classpath)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above example starts with the current project, adds its build script dependencies to the classpath and then recursively looks at the project&amp;#8217;s root project.  This continues
until the project does not have a root project or the root project is the project itself.  The result is then converted to a &lt;code&gt;FileCollection&lt;/code&gt; and the classpath is set, ensuring
that the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html&quot; target=&quot;_blank&quot;&gt;Gradle JavaExec Task&lt;/a&gt; has the dependencies provided by the custom plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Updating to the latest Docker/Boot2Docker version</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/08/05/docker_upgrade.html</link>
            <pubDate>Tue, 5 Aug 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/08/05/docker_upgrade.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not too long ago, the &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; project released 1.0 release, which among many improvements includes a new default port for &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;.  To update from &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;
 &amp;lt; 1.0 to &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; &amp;gt;= 1.0, you may run into issues as the port that &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; listens on by default has changed from 4243 to 2375.  While things
may appear to start correctly after an upgrade, you may see the following error when attempting to run any &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; client command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;$ boot2docker up

Cannot connect to the Docker daemon. Is &apos;docker -d&apos; running on this host?&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is because your &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;Virtual Box&lt;/a&gt; &quot;boot2docker-vm&quot; image is still listening on the old port and therefore is not receiving the forwarded commands.  You can verify this by
starting up &lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot; target=&quot;_blank&quot;&gt;Boot2Docker&lt;/a&gt; and ssh&amp;#8217;ing (&lt;code&gt;boot2docker ssh&lt;/code&gt;) into the VM to check the port that docker is listening on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;docker@boot2docker:~$ sudo netstat -ntpl | grep docker
tcp        0      0 :::4243                :::*                    LISTEN      627/docker&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To fix this, use the following steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Update to latest &lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot; target=&quot;_blank&quot;&gt;Boot2Docker&lt;/a&gt; and &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; via &lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot;&gt;Homebrew&lt;/a&gt; (installing &lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot; target=&quot;_blank&quot;&gt;Boot2Docker&lt;/a&gt; will automatically install/update &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; to the corresponding version).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;boot2docker delete&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete the existing &lt;code&gt;~/.boot2docker&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;boot2docker init&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot;&gt;Virtual Box&lt;/a&gt;, select the &lt;code&gt;boot2docker-vm&lt;/code&gt; and click on the &quot;Settings&quot; button.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Click on the &quot;Network button&quot; in the settings window, expand the &quot;Advanced&quot; area and click on the &quot;Port Forwarding&quot; button.  Verify that 2375 and 2022 are in the list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;boot2docker up&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;boot2docker ssh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the VM, run the following command to verify that &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; is listening on port 2375:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;sudo netstat -ntpl | grep docker

docker@boot2docker:~$ sudo netstat -ntpl | grep docker
tcp        0      0 :::2375                 :::*                    LISTEN      627/docker&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should now be able to connect to &lt;a href=&quot;http://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt; and use the command line client and the REST API!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Leveraging Spring Boot Starters in Unit/Integration Tests</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/07/29/spring_boot_integration_tests.html</link>
            <pubDate>Tue, 29 Jul 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/07/29/spring_boot_integration_tests.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; provides a nice &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#testcontext-junit4-runner&quot; target=&quot;_blank&quot;&gt;JUnit integration&lt;/a&gt;, which allows one to write integration-style tests that make use of a fully loaded and configured Spring context.
This is great help when writing an integration test suite to test something like a database, as you do not need to manually create all the code required to interact
with the database.  Instead, you can rely upon Spring to configure the beans just as it would at runtime.  Recently, I found myself in a situation where I needed to
write just such an integration test, though this time for an application that uses &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;.  You do not need to do anything special to leverage the &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#testcontext-junit4-runner&quot; target=&quot;_blank&quot;&gt;JUnit integration&lt;/a&gt;
integration, as that is provided by the &lt;a href=&quot;https://github.com/spring-projects/spring-framework/tree/master/spring-test&quot; target=&quot;_blank&quot;&gt;Spring Test module&lt;/a&gt; of the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;
project.  What you do not get by default, is all of the auto-configuration magic that &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; provides, including logging configuration.  With the release of &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;
1.1.4, it is now possible to add the following to your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; configuration file to control the logging output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;logging.level.org.springframework: ERROR&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, I wanted to be able to turn on SQL logging when executing my integration tests via the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; JPA configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;spring.jpa.properties.hibernate.show_sql: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, simply using the &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html#testcontext-junit4-runner&quot; target=&quot;_blank&quot;&gt;JUnit integration&lt;/a&gt; does not cause &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; to load the configuration or perform any of the auto-configuration that it does when running the application.
To enable &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; to work its magic when running unit/integration tests that load a context, the first step is to include the &lt;code&gt;spring-boot-starter-test&lt;/code&gt; dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;testCompile &apos;org.springframework.boot:spring-boot-starter-test:1.1.4.RELEASE&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The presence of this dependency will cause &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; to perform all the normal start-up auto-configuration that occurs when running the application.  However, in order for this to
actually happen, you need to tell JUnit to use the &lt;code&gt;SpringApplicationContextLoader&lt;/code&gt; when loading the context:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={TestConfiguration.class}, loader = SpringApplicationContextLoader.class)
public class DatabaseIntegrationTests {
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; loads the test configuration, it does so via &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;&apos;s &lt;code&gt;SpringApplicationContextLoader&lt;/code&gt;, which is provided by the &lt;code&gt;spring-boot-starter-test&lt;/code&gt;.  This
context loader supports all of the auto-configuration magic that we know and love in &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;.  Now, you can adjust logging levels, provide configuration and have your contexts
make use of the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; auto-configuration annotations as part of your test suite!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Discovering Gradle build scripts from classpath</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/07/22/gradle_build_scripts_classpath.html</link>
            <pubDate>Tue, 22 Jul 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/07/22/gradle_build_scripts_classpath.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; currently supports two different way to reference other &lt;code&gt;.gradle&lt;/code&gt; files from a build script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Apply a script from file via &lt;code&gt;apply from: &apos;path/to/some/script.gradle&apos;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply a script from URL via &lt;code&gt;apply from: &apos;http://some/url/script.gradle&apos;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first is great for one-off scripts in your project, but is not really helpful when you want to share &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; scripts among projects.  The second
approach would work for sharing, but is really limited with regards to the supported functionality (e.g. you cannot specify HTTP headers to handle login/security
concerns, etc).  While you can obviously create a plugin that approximates the logic in the script that you want to share, its a pain to have to create a new
project and push it to your artifact repository each time you want to share build logic.  The solution?  Create a single &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; plugin that is capable of scanning
the build script classpath at execution time to find and apply &lt;code&gt;.gradle&lt;/code&gt; files to the current project.  This approach uses the &lt;code&gt;PathMatchingResourcePatternResolver&lt;/code&gt;
class from the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;  to locate each &lt;code&gt;.gradle&lt;/code&gt; file.  Once the files have been located, the
files are read from the classpath and extracted to a temporary &lt;code&gt;scripts&lt;/code&gt; folder under the project&amp;#8217;s build directory and then applied to the current project via
the file-based approach outlined above.  Here is the entire plugin code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;class BuildScriptSupportPlugin implements Plugin&amp;lt;Project&amp;gt; {

    /**
     * Spring {@link PathMatchingResourcePatternResolver} used to find all Gradle scripts
     * on the classpath.
     */
    private PathMatchingResourcePatternResolver resourceResolver = new PathMatchingResourcePatternResolver(getClass().getClassLoader());

    @Override
    public void apply(Project project) {
        project.logger?.debug(&quot;Applying Build Script Support Plugin to ${project.name}...&quot;)

        // Make sure the output directory for the extracted scripts exists.
        File outputDirectory = new File(project.buildDir, &apos;scripts&apos;)
        outputDirectory.mkdirs()

        // Find all .gradle files in the &quot;scripts&quot; package on the class path.
        Resource[] resources = resourceResolver.findPathMatchingResources(&apos;classpath*:/scripts/*.gradle&apos;)

        // For each script, copy it from the class path to the output directory and then apply it to the project.
        resources.each { Resource resource -&amp;gt;
            try {
                File output = new File(outputDirectory, resource.getFilename())
                output.withWriter { writer -&amp;gt;
                    writer.write(new InputStreamReader(resource.getInputStream()).getText())
                }
                project.apply([from: &quot;${outputDirectory}/${resource.getFilename()}&quot;])
            } catch (e) {
                project.logger?.error(&quot;Unable to retrieve and apply bulid script &apos;${resource.getFilename()}&apos;: ${e.getMessage()}&quot;)
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By convention, the plugin looks for the extra scripts in the &lt;code&gt;scripts&lt;/code&gt; package on the classpath.  In practice, I put the scripts in &lt;code&gt;src/main/resources/scripts&lt;/code&gt;
in the projects/libraries that I use to bundle up the shared scripts.  To use the plugin and any libraries that may contain build scripts in your project, simply add
them to your &lt;code&gt;build.gradle&lt;/code&gt; script in the &lt;code&gt;buildScript&lt;/code&gt; section:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;apply plugin: &apos;build-script-support&apos;

buildscript {
    repositories {
        mavenLocal()
        maven { url &apos;your local repo URL&apos; }
    }
    dependencies {
        classpath(&apos;org.gradle.plugins:gradle-build-script-support-plugin:1.0.0-SNAPSHOT&apos;)
        classpath(&apos;com.example:custom-gradle-scripts:1.0.0-SNAPSHOT&apos;)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Future enhancements to this plugin will/could include the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Include/Exclude patterns for script names when scanning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Script name disambiguation to avoid two scripts from two different JAR&amp;#8217;s with the same name clobbering each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to explicitly specify location of script on classpath to scan (to support situations where a script cannot be moved to the conventional place).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be noted that the code above was written and used with &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; 1.12 and has not yet been tested with 2.0, though I don&amp;#8217;t expect any issues.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Remote debugging a Spring Boot application launched by the Gradle plugin</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/07/15/spring_boot_remote_debug.html</link>
            <pubDate>Tue, 15 Jul 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/07/15/spring_boot_remote_debug.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is very helpful to be able to set break points in your IDE and attach to a running application to debug what is going on.  Java provides this functionality via
the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&quot; target=&quot;_blank&quot;&gt;JPDA Transport&lt;/a&gt;.  Additionally, because the &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/1.1.1.RELEASE/reference/html/build-tool-plugins-gradle-plugin.html&quot; target=&quot;_blank&quot;&gt;Spring Boot Gradle Plugin&lt;/a&gt;
is built on top of the existing &lt;a href=&quot;http://www.gradle.org/docs/current/userguide/application_plugin.html&quot; target=&quot;_run&quot;&gt;Gradle Application Plugin&lt;/a&gt;, it is easy to provide JVM
arguments to the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application launcher from your &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; build script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;run {
    jvmArgs = [&apos;-Xdebug&apos;, &apos;-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=y&apos;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When running the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application from &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt;, the application will wait on start up until a remote debugger (such as from your IDE) connects to the
process on port 4000 via the JPDA Transport protocol:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;root@laptop-mbp:~/sample_app$ ./gradlew run
:compileJava
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes
:findMainClass
:run
Listening for transport dt_socket at address: 4000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the debugger is attached, execution will continue on normally, halting only when it comes across any break points set in the debugger.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
