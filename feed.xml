<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Tue, 15 Jul 2014 11:10:16 -0400</pubDate>
        <lastBuildDate>Tue, 15 Jul 2014 11:10:16 -0400</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Remote debugging a Spring Boot application launched by the Gradle plugin</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/07/15/spring_boot_remote_debug.html</link>
            <pubDate>Tue, 15 Jul 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/07/15/spring_boot_remote_debug.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is very helpful to be able to set break points in your IDE and attach to a running application to debug what is going on.  Java provides this functionality via
the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&quot; target=&quot;_blank&quot;&gt;JPDA Transport&lt;/a&gt;.  Additionally, because the &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/1.1.1.RELEASE/reference/html/build-tool-plugins-gradle-plugin.html&quot; target=&quot;_blank&quot;&gt;Spring Boot Gradle Plugin&lt;/a&gt;
is built on top of the existing &lt;a href=&quot;http://www.gradle.org/docs/current/userguide/application_plugin.html&quot; target=&quot;_run&quot;&gt;Gradle Application Plugin&lt;/a&gt;, it is easy to provide JVM
arguments to the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application launcher from your &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; build script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;run {
    jvmArgs = [&apos;-Xdebug&apos;, &apos;-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=y&apos;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When running the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application from &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt;, the application will wait on start up until a remote debugger (such as from your IDE) connects to the
process on port 4000 via the JPDA Transport protocol:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;root@laptop-mbp:~/sample_app$ ./gradlew run
:compileJava
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes
:findMainClass
:run
Listening for transport dt_socket at address: 4000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the debugger is attached, execution will continue on normally, halting only when it comes across any break points set in the debugger.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Setting system properties/environment variables with Spring Boot and Gradle</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/07/08/spring_boot_env_vars.html</link>
            <pubDate>Tue, 8 Jul 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/07/08/spring_boot_env_vars.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Out of the box, &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; ships with a &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; plugin that supports running your application, as well as building an executable JAR or WAR file.  The plugin
extends off the stock &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html&quot; target=&quot;_blank&quot;&gt;JavaExec Task&lt;/a&gt;, which means that you can
use any of the task&amp;#8217;s configuration properties to customize how your application runs when launching it via &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; (e.g. &lt;code&gt;./gradlew run&lt;/code&gt;).  For instance, if you
would like to set some system properties, environment variables and/or other any other support JVM properties/arguments, you simply need to define an additional &lt;code&gt;run&lt;/code&gt;
configuration block in your &lt;code&gt;build.gradle&lt;/code&gt; build script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;apply plugin: &apos;java&apos;
apply plugin: &apos;spring-boot&apos;

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(&apos;org.springframework.boot:spring-boot-gradle-plugin:1.1.4.RELEASE&apos;)
    }
}

run {
    environment = [&apos;ENV&apos; : &apos;dev&apos;]
    maxHeapSize = &apos;512M&apos;
    systemProperties = [&apos;serverPort&apos;:&apos;8085&apos;]
}

springBoot {
    mainClass = &apos;com.test.Application&apos;
}

repositories {
    mavenCentral()
}

dependencies {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a complete list of the properties of the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html&quot; target=&quot;_blank&quot;&gt;JavaExec Task&lt;/a&gt; that can be
set, see the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html#N1E1D1&quot; target=&quot;_blank&quot;&gt;Properties&lt;/a&gt; of the
&lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.JavaExec.html&quot; target=&quot;_blank&quot;&gt;JavaExec Task Gradle Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Eclipse, Environment Variables and Mac OSX</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/07/01/eclipse_env_vars_mac_osx.html</link>
            <pubDate>Tue, 1 Jul 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/07/01/eclipse_env_vars_mac_osx.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I ran into an issue the other day when attempting to run a &lt;a href=&quot;http://gradle.org&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; build script that invokes a process from within Eclipse.  For whatever reason, Eclipse does not pick up
environment variables from the shell when launching on Mac OSX.  If you attempt to reference a command on your path from within Eclipse, you will most likely see
an error similar to this one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;java.io.IOException: Cannot run program &quot;thrift&quot;: error=2, No such file or directory&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just to prove that I was not crazy and the &lt;code&gt;thrift&lt;/code&gt; binary was indeed present on my path, I ran the following command from a terminal window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;~$ thrift -version
Thrift version 0.9.1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To correct this problem on Mac OSX, you can create a basic bash script to export the variables that you need (in my case, the binary was aleady included
on my PATH environment variable) and then launch Eclipse:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;eclipseLauncher.sh&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;#!/bin/bash
source ~/.profile
/Applications/eclipse/eclipse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, create an &lt;code&gt;Automator&lt;/code&gt; that can launch the new script.  To do so, follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;From the dock in Mac OSX, open Applications &amp;gt; Automator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &quot;Application&quot; from the document wizard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search for and select &quot;Run Shell Script&quot; from the &quot;Actions&quot; search box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the following into the text box in the &quot;Run Shell Script&quot; section:&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;/Applications/eclipse/eclipseLauncher.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &quot;as arguments&quot; in the &quot;Pass Input&quot; selector.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can test the new script from the Automator application before saving by clicking on the &quot;Run&quot; button in the upper right-hand corner of the Automator window.
When you are ready, select &quot;File &amp;gt; Save&amp;#8230;&quot; to save the new application automator script.  I recommend saving it in &lt;code&gt;/Applications/eclipse&lt;/code&gt;.  &lt;strong&gt;MAKE SURE THAT YOU DO
NOT OVERWRITE THE EXISTING &quot;Eclipse&quot; APPLICATION&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next up, add it to the dock by launching it via the Applications menu.  You can also open the &lt;code&gt;/Applications/eclipse&lt;/code&gt; folder in the Finder, select the new application and right-click select &quot;Get Info&quot; if you want to change the icon.
In the info window, click on the icon at the top of the window so that a blue halo appears around it.  In the finder window, select the original Eclipse application file and drag it over the icon in the info window to change the new application to use the Eclipse icon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails and Logback Revisited</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/06/24/logback_grails.html</link>
            <pubDate>Tue, 24 Jun 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/06/24/logback_grails.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://jonathanpearlin.com/2014/03/24/grails_logback.html&quot; target=&quot;_blank&quot;&gt;Previously&lt;/a&gt;, I blogged about using &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; with &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt;.  While the contents of that post are mostly accurate, I have uncovered a few issues
with that approach, mostly related to the use of the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt;.  The &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; is intended to only work the &lt;code&gt;logback&lt;/code&gt; DSL in &lt;code&gt;grails-app/conf/*Config.groovy&lt;/code&gt;.  If you attempt to use your own custom &lt;code&gt;logback.xml&lt;/code&gt;
or &lt;code&gt;logback.groovy&lt;/code&gt;, it is ignored, even though &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; may report that it was loaded.  My suspicion is that the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; plugin is re-initializing &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; after the fact, thus erasing any configuration loaded
from the configuration files.  Additionally, the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; depends on version 1.0.12 of &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt;, which is about 3 to 4 release behind the latest release.  I arrived at the conclusion that the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; was interferring with
my configuration files by using the following &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;logback.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;import static ch.qos.logback.classic.Level.ERROR
import static ch.qos.logback.classic.Level.INFO
import ch.qos.logback.classic.encoder.PatternLayoutEncoder
import ch.qos.logback.core.ConsoleAppender
import ch.qos.logback.core.rolling.FixedWindowRollingPolicy
import ch.qos.logback.core.rolling.RollingFileAppender
import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy
import ch.qos.logback.core.status.OnConsoleStatusListener

def BASE_DIR = System.getProperty(&apos;catalina.base&apos;) ?: System.getProperty(&apos;user.dir&apos;)

statusListener OnConsoleStatusListener
jmxConfigurator(&apos;myapp:type=LoggerManager&apos;)

appender(&apos;STDOUT&apos;, ConsoleAppender) {
    encoder(PatternLayoutEncoder) {
        pattern = &apos;%-50(%date{ISO8601} [%thread]) %-5level %logger{50} - %msg%n%rEx&apos;
    }
}

logger(&apos;org.codehaus.groovy.grails&apos;, ERROR, [&apos;STDOUT&apos;], false)
logger(&apos;org.springframework&apos;, ERROR, [&apos;STDOUT&apos;], false)
logger(&apos;org.hibernate&apos;, ERROR, [&apos;STDOUT&apos;], false)
logger(&apos;net.sf.ehcache&apos;, ERROR, [&apos;STDOUT&apos;], false)
logger(&apos;grails.plugin&apos;, ERROR, [&apos;STDOUT&apos;], false)
logger(&apos;org.grails.plugin&apos;, ERROR, [&apos;STDOUT&apos;], false)
logger(&apos;grails.app&apos;, INFO, [&apos;STDOUT&apos;], false)

root(INFO, [&apos;STDOUT&apos;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When starting the application with this configuration, the only output reported by &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;13:27:25,368 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@61b99295 - Added status listener of type [ch.qos.logback.core.status.OnConsoleStatusListener]
13:27:25,549 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@61b99295 - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
13:27:25,550 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@61b99295 - Naming appender as [STDOUT]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is very strange, as &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; was not reporting that any loggers were created or that those loggers have been associated with one or more appenders.  After some digging through
the &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; &lt;code&gt;ch.qos.logback.classic.gaffer.ConfigurationDelegate&lt;/code&gt; class, which handles the DSL from the above configuration, I noticed that the most recent version of &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; (1.1.2)
has much better output during startup.  I decided to change my &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; application to explicitly depend on the latest &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; version:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;BuildConfig.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;plugins {
    compile &apos;:logback:0.3.1&apos;
}

dependencies {
    compile &apos;ch.qos.logback:logback-core:1.1.2&apos;
    compile &apos;ch.qos.logback:logback-classic:1.1.2&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After restarting the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; application, I saw the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;13:32:36,412 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Added status listener of type [ch.qos.logback.core.status.OnConsoleStatusListener]
13:32:36,556 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
13:32:36,557 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Naming appender as [STDOUT]
13:32:36,981 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [org.codehaus.groovy.grails] to ERROR
13:32:36,989 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[org.codehaus.groovy.grails]
13:32:37,070 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [org.springframework] to ERROR
13:32:37,070 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[org.springframework]
13:32:37,071 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [org.hibernate] to ERROR
13:32:37,071 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[org.hibernate]
13:32:37,071 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [net.sf.ehcache] to ERROR
13:32:37,071 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[net.sf.ehcache]
13:32:37,072 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [grails.plugin] to ERROR
13:32:37,072 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[grails.plugin]
13:32:37,072 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [org.grails.plugin] to ERROR
13:32:37,072 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[org.grails.plugin]
13:32:37,073 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [grails.app] to INFO
13:32:37,073 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[grails.app]
13:32:37,074 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Setting level of logger [ROOT] to INFO
13:32:37,074 |-INFO in ch.qos.logback.classic.gaffer.ConfigurationDelegate@55e6490 - Attaching appender named [STDOUT] to Logger[ROOT]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sweet.  &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; appeared to be configured and working as expected.  After clicking around my application and not seeing anything log to the console, I became very suspicious that I had solved the problem simply
by updating the version of &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; used by the application.  I decided to print out the appenders associated with one of the loggers to verify that the &lt;code&gt;ConfigurationDelegate&lt;/code&gt; actually set things up properly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bootstrap.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def init = { servletContext -&amp;gt;
    println &quot;Appenders = ${LoggerFactory.getLogger(&apos;grails.app&apos;).aai.appenderList&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code above printed out an empty list.  After some head scratching, I determined that the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; was somehow overwriting/replacing the &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration set up by the &lt;code&gt;logback.groovy&lt;/code&gt; file.  I decided
to remove the dependency on the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; from &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt; as I am not using the DSL from &lt;code&gt;grails-app/conf/*Config.groovy&lt;/code&gt;. After removing the &lt;a href=&quot;http://grails.org/plugin/logback&quot; target=&quot;_blank&quot;&gt;Grails Logback Plugin&lt;/a&gt; entirely, everything worked as expected!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>A Tomcat Rolling File Appender with Logback</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/06/17/logback_tomcat_rolling_appender.html</link>
            <pubDate>Tue, 17 Jun 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/06/17/logback_tomcat_rolling_appender.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, I needed to add a &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration to an application that is deployed in &lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Tomcat&lt;/a&gt;.  I wanted to
ensure that my log files did not grow in an unbounded manner.  To protect against this, I decided to use the &lt;code&gt;RollingFileAppender&lt;/code&gt; provided by &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt;.  That is an
obvious choice to solve this problem, but I wanted to ensure that when running the application in &lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Tomcat&lt;/a&gt;, the generated
log files end up in &lt;code&gt;${catalina.base}/logs&lt;/code&gt; and when running locally via something like the &lt;a href=&quot;http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/&quot; target=&quot;_blank&quot;&gt;Maven Apache Tomcat Plugin&lt;/a&gt;
it chose an appropriate output directory.  I arrive at the following &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt;-based &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;logback.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;import static ch.qos.logback.classic.Level.INFO

import ch.qos.logback.classic.encoder.PatternLayoutEncoder
import ch.qos.logback.core.rolling.FixedWindowRollingPolicy
import ch.qos.logback.core.rolling.RollingFileAppender
import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy
import ch.qos.logback.core.status.OnConsoleStatusListener

// Print out the Logback configuration information at startup.
statusListener OnConsoleStatusListener

def BASE_DIR = System.getProperty(&apos;catalina.base&apos;) ?: System.getProperty(&apos;user.dir&apos;)	&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

appender(&quot;WEBAPP&quot;, RollingFileAppender) {
    file = &quot;${BASE_DIR}/logs/application.log&quot;
    encoder(PatternLayoutEncoder) {
        pattern = &quot;%-50(%date{ISO8601} [%thread]) %-5level %logger{50} - %msg%n%rEx&quot;
    }
    triggeringPolicy(SizeBasedTriggeringPolicy) {
        maxFileSize = &apos;10MB&apos;
    }
    rollingPolicy(FixedWindowRollingPolicy) {
        fileNamePattern = &quot;${BASE_DIR}/logs/application-%d{yyyyMMdd_hhmmss}.%i.gz&quot;
        maxIndex = 10
    }
}

root(INFO, [&quot;WEBAPP&quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the &lt;code&gt;catalina.base&lt;/code&gt; property is present and not blank, use it.  Otherwise, use the current user&amp;#8217;s directory as the base for the log file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration above ensures that not only will the log files be rotated based on size, but that the files will be created in the appropriate location based
on the inspection of the &lt;code&gt;catalina.base&lt;/code&gt; and &lt;code&gt;user.dir&lt;/code&gt; system properties.  Because the configuration is written in &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt;, we can
use any sort of logic we want to manipulate the &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration at runtime to ensure the proper setup for the logging infrastructure in our application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
