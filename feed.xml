<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Tue, 13 Jan 2015 07:45:44 -0800</pubDate>
        <lastBuildDate>Tue, 13 Jan 2015 07:45:44 -0800</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>Check Jenkins Job Status via REST API</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/13/jenkins_check_job_status.html</link>
            <pubDate>Wed, 7 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/13/jenkins_check_job_status.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a ton of &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; plugins out there that let you control when a job should run based on the status of
other builds.  However, plugins typically become out of date pretty quickly.  If you don&amp;#8217;t want to have to play
the plugin update game, you can use a little bash magic to leverage the &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; REST API to check the status
of other jobs before running your builds.  Let&amp;#8217;s assume that you have a job named &lt;code&gt;other-job&lt;/code&gt; that must be in
a success state in order for another job to execute.  You can check the status of the &lt;code&gt;other-job&lt;/code&gt; by using
the &lt;a href=&quot;http://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; REST API as part of an executed shell in the job&amp;#8217;s configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;job_status=`curl https://jenkins/view/job/other-job/lastBuild/api/json | grep &quot;\&quot;result\&quot;:\&quot;SUCCESS\&quot;&quot;`

if [ -n &quot;$job_status&quot; ]
then
    # Run your script commands here
else
  echo &quot;BUILD FAILURE: Other build is unsuccessful or status could not be obtained.&quot;
  exit 1
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; block of this other job could even do something like invoke another build that has a parameterized configuration to run your
actual build via the REST API.  This would allow you to have the job with the configuration above check the status of &lt;code&gt;other-job&lt;/code&gt; first
and then kick of a third job that actual performs the build, but only if the first job is successful, all without
installing any additional plugins.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Using CSS Parser and JSoup to Inline Styles for Web Mail</title>
            <link>http://jdpgrailsdev.github.io/blog/2015/01/06/email_inline_style_jsoup_cssparser.html</link>
            <pubDate>Tue, 6 Jan 2015 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2015/01/06/email_inline_style_jsoup_cssparser.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of an on-going project, we had a requirement to send pretty (CSS-ified) e-mails to communicate status.  Sending HTML-based e-mails from Java is pretty easy.  There
are a ton of templating engines out there that can be used to generate HTML.  However, what most people fail to realize is that most web mail providers (e.g. Gmail, Yahoo!, etc) handle a limited
subset of standard CSS.  You can find out what is supported by looking at &lt;a href=&quot;https://www.campaignmonitor.com/css/&quot; target=&quot;_blank&quot;&gt;Campaign Monitor CSS Support&lt;/a&gt;.  The first thing you might notice is that almost all of the web mail providers
do not support CSS classes.  They do, however, support inline style declarations.  Being a good developer, you know that you want to keep all of your CSS in style sheets so
that you do not have to find and replace styles in multiple templates/files.  This poses a problem if the clients can only support inline styles.  The solution?  A combination
of &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; and &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; to load and convert a style sheet into inline style declarations.  The solution in this blog post uses &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; to parse a CSS style sheet file
loaded from the classpath into a set of &lt;code&gt;CSSSytleRule&lt;/code&gt; objects.  It then uses &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; to walk the DOM in the HTML and find elements that match the rules present in the parsed style sheet.  To start, you
need to include the &lt;a href=&quot;http://cssparser.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CSS Parser&lt;/a&gt; and &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;compile &apos;org.jsoup:jsoup:1.8.1&apos;
compile &apos;net.sourceforge.cssparser:cssparser:0.9.14&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, create the &lt;code&gt;CSSOMParser&lt;/code&gt; used to parse the CSS style sheet and load the style sheet from the classpath:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.steadystate.css.parser.CSSOMParser;

import org.w3c.dom.css.CSSStyleSheet;

...

CSSOMParser parser = new CSSOMParser();
CSSStyleSheet stylesheet = parser.parseStyleSheet(new InputSource(new InputStreamReader(getClass().getResourceAsStream(&quot;/css/styles.css&quot;))), null, null);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have our style sheet loaded and parsed, we can use the following code to walk the DOM and add inline style declarations
to elements that match the rules contained in the style sheet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;final Document document = Jsoup.parse(originalHtml);
final CSSRuleList rules = stylesheet.getCssRules();
final Map&amp;lt;Element, Map&amp;lt;String, String&amp;gt;&amp;gt; elementStyles = new HashMap&amp;lt;&amp;gt;();

/*
 * For each rule in the style sheet, find all HTML elements that match
 * based on its selector and store the style attributes in the map with
 * the selected element as the key.
 */
for (int i = 0; i &amp;lt; rules.getLength(); i++) {
    final CSSRule rule = rules.item(i);
    if (rule instanceof CSSStyleRule) {
        final CSSStyleRule styleRule = (CSSStyleRule) rule;
        final String selector = styleRule.getSelectorText();

        // Ignore pseudo classes, as JSoup&apos;s selector cannot handle
        // them.
        if (!selector.contains(&quot;:&quot;)) {
            final Elements selectedElements = document.select(selector);
            for (final Element selected : selectedElements) {
                if (!elementStyles.containsKey(selected)) {
                    elementStyles.put(selected, new LinkedHashMap&amp;lt;String, String&amp;gt;());
                }

                final CSSStyleDeclaration styleDeclaration = styleRule.getStyle();

                for (int j = 0; j &amp;lt; styleDeclaration.getLength(); j++) {
                    final String propertyName = styleDeclaration.item(j);
                    final String propertyValue = styleDeclaration.getPropertyValue(propertyName);
                    final Map&amp;lt;String, String&amp;gt; elementStyle = elementStyles.get(selected);
                    elementStyle.put(propertyName, propertyValue);
                }

            }
        }
    }
}

/*
 * Apply the style attributes to each element and remove the &quot;class&quot;
 * attribute.
 */
for (final Map.Entry&amp;lt;Element, Map&amp;lt;String, String&amp;gt;&amp;gt; elementEntry : elementStyles.entrySet()) {
    final Element element = elementEntry.getKey();
    final StringBuilder builder = new StringBuilder();
    for (final Map.Entry&amp;lt;String, String&amp;gt; styleEntry : elementEntry.getValue().entrySet()) {
        builder.append(styleEntry.getKey()).append(&quot;:&quot;).append(styleEntry.getValue()).append(&quot;;&quot;);
    }
    builder.append(element.attr(&quot;style&quot;));
    element.attr(&quot;style&quot;, builder.toString());
    element.removeAttr(&quot;class&quot;);
}

System.out.println(document.html());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One important thing to note in the code above is that &lt;a href=&quot;http://jsoup.org/&quot; target=&quot;_blank&quot;&gt;JSoup&lt;/a&gt; cannot handle pseudo classes in selectors.  Therefore, any
selector that contains a colon (&quot;:&quot;) is ignored.  Otherwise, each selector contained in the parsed sytle sheet is applied
to the HTML.  Inline styles are appended to each other, so ordering in your CSS stylesheet matters!  The output of the
code above is the modified HTML with all styles that could be applied converted to inline style declarations.  Now, when
this HTML is interpreted in a web mail client, it will look as it was intended to look by the developer.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Leverage Spring Boot&amp;#8217;s YAML Configuration Files in Groovy Scripts</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/12/30/groovy_script_spring_boot_yaml.html</link>
            <pubDate>Tue, 30 Dec 2014 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2014/12/30/groovy_script_spring_boot_yaml.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a &lt;a href=&quot;http://jdpgrailsdev.github.io/blog/2014/12/16/spring_context_groovy_script.html&quot; target=&quot;_blank&quot;&gt;previous&lt;/a&gt; blog post, I discussed how to load
an application&amp;#8217;s &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; configuration in a &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script.  This is a great way to test portions of your application without running the
entire application.  However, this approach has limits.  When trying this with a &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application, you miss out on a bunch of the magical
auto-enabling done by &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;.  This includes the ability of &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; to find certain properties and configuration files and load their
contents for use by &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;&apos;s property placeholder mechanism.  In this post, I&amp;#8217;ll discuss how to include a little extra &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; sauce to get the
&lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context to load a YAML file from the classpath and use its values for property placeholder replacement.  Let&amp;#8217;s start by looking at how
to tell the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context how to load the YAML file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class YamlMapPropertySourceLoader extends YamlPropertySourceLoader {

    @Override
    public PropertySource load(String name, Resource resource, String profile) throws IOException {
        if (ClassUtils.isPresent(Yaml.class.name, null)) {
            final YamlMapFactoryBean bean = new YamlMapFactoryBean();
            YamlMapFactoryBean factory = new YamlMapFactoryBean()
            factory.setDocumentMatchers(new DefaultProfileDocumentMatcher(), new SpringProfileDocumentMatcher(profile))
            factory.setResolutionMethod(ResolutionMethod.OVERRIDE)
            factory.setResources([resource] as Resource[])
            return new MapPropertySource(name, factory.getObject())
        }
        null
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code above defines a new &lt;code&gt;PropertySourceLoader&lt;/code&gt; class that produces a &lt;code&gt;PropertySource&lt;/code&gt; wrapping the loaded YAML file.  This bean is responsible for reading
in the contents of the &lt;code&gt;Resource&lt;/code&gt; that contains the YAML file loaded from the classpath and converting those values to a &lt;code&gt;Map&lt;/code&gt; that can be used
by the property placeholder resolver.  You may notice that it checks to see the &lt;a href=&quot;https://code.google.com/p/snakeyaml/&quot; target=&quot;_blank&quot;&gt;Snakeyaml&lt;/a&gt; library is on the classpath.  This code is a copy of
the code found in the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; &lt;code&gt;YamlPropertySourceLoader&lt;/code&gt;, with a small tweak to use the &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; instead of the &lt;code&gt;YamlPropertiesFactoryBean&lt;/code&gt;
(more on this in a bit).  The next step is to create a new Java-based configuration class to register the new &lt;code&gt;YamlMapPropertySourceLoader&lt;/code&gt; with the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;
context:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Configuration
@Order(Ordered.HIGHEST_PRECEDENCE)
class YamlConfiguration {

    @Bean
    public static EnvironmentAwarePropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(PropertySource yamlPropertySourceLoader) {
        MutablePropertySources propertySources = new MutablePropertySources()
        propertySources.addFirst(yamlPropertySourceLoader)

        EnvironmentAwarePropertySourcesPlaceholderConfigurer configurer = new EnvironmentAwarePropertySourcesPlaceholderConfigurer()
        configurer.propertySources = propertySources
        configurer
    }

    @Bean
    public PropertySource yamlPropertySourceLoader() throws IOException {
      YamlMapPropertySourceLoader loader = new YamlMapPropertySourceLoader()
      PropertySource applicationYamlPropertySource = loader.load(&apos;application.yml&apos;, new ClassPathResource(&apos;application.yml&apos;, getClass()), &apos;integration&apos;)
      applicationYamlPropertySource
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration above creates two beans:  one to enable the resolving of property placeholders based on the active profile and another to
actually find and load the YAML configuration file from the classpath.  The special &lt;code&gt;PropertySourcePlaceholderConfiguration&lt;/code&gt; is necessary to make
sure that the configuration loaded from the classpath is added to the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; framework context.  Otherwise, simply provided the loader is not
enough to expose the loaded data to the context.  This custom class provides a mechanism to merge the newly found and created property source with those
provided by &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class EnvironmentAwarePropertySourcesPlaceholderConfigurer extends PropertySourcesPlaceholderConfigurer implements EnvironmentAware, InitializingBean {

    MutablePropertySources propertySources
    Environment environment

    @Override
    public void setEnvironment(Environment environment) {
        this.environment = environment
        super.setEnvironment(environment)
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        def envPropertySources = environment.getPropertySources()
        propertySources.each { propertySource -&amp;gt;
            envPropertySources.addFirst(propertySource)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The custom configurer uses the loaded YAML property source and the configured &lt;code&gt;Environment&lt;/code&gt; to create a combined set of property sources that can be used for property placeholder replacement.
Once you have this new configuration class in place, you need to register it with the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;...
ctx.register(YamlConfiguration)
ctx.refresh()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After wiring all of this together and running the &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script, I noticed that the script was upset with some, but not all, of the property placeholders.  After some digging around, I noticed
that it was having issues with finding nested values in the YAML configuration.  For instance, let&amp;#8217;s say you have the following YAML configuration file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;service:
    host.url: &apos;localhost&apos;
settings:
    timeout: 30
    connection.timeout = 100
debug: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You would expect to be able to do something like this using the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; &lt;code&gt;Value&lt;/code&gt; annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Value(&quot;${service.host.url}&quot;)
private String hostUrl;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, because the &lt;a href=&quot;https://code.google.com/p/snakeyaml/&quot; target=&quot;_blank&quot;&gt;Snakeyaml&lt;/a&gt; library that backs the &lt;code&gt;YamlMapFactoryBean&lt;/code&gt; does a literal translation of the configuration to map, separating keys wherever it finds a &apos;.&apos; character, the resolver
cannot find the key &lt;code&gt;service.host.url&lt;/code&gt; (it could find &lt;code&gt;service&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; under &lt;code&gt;service&lt;/code&gt;, etc).  One way to resolve this is to flatten out the map after loading it, but before returning it from the
property source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class YamlMapPropertySourceLoader extends YamlPropertySourceLoader {

    @Override
    public PropertySource load(String name, Resource resource, String profile) throws IOException {
        if (ClassUtils.isPresent(Yaml.class.name, null)) {
            final YamlMapFactoryBean bean = new YamlMapFactoryBean();
            YamlMapFactoryBean factory = new YamlMapFactoryBean()
            factory.setDocumentMatchers(new DefaultProfileDocumentMatcher(), new SpringProfileDocumentMatcher(profile))
            factory.setResolutionMethod(ResolutionMethod.OVERRIDE)
            factory.setResources([resource] as Resource[])
            return new MapPropertySource(name, flattenMap(factory.getObject()))
        }
        null
    }

        private Map flattenMap(Map aMap, prefix=null) {
        aMap.inject([:]) { map, entry -&amp;gt;
            if(entry.value instanceof Map) {
                map += flattenMap(entry.value, createKey(prefix, entry.key))
            } else {
                map.&quot;${createKey(prefix, entry.key)}&quot; = entry.value
            }
            map
        }
    }

    private String createKey(prefix, key) {
        (prefix?.length() &amp;gt; 0) ? &quot;${prefix}.${key}&quot; : key
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this updated version of the &lt;code&gt;YamlMapPropertySourceLoader&lt;/code&gt;, we use some &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt;-foo to flatten out the map so that the keys will match the strings provided to the &lt;code&gt;Value&lt;/code&gt; annotation.  Now, when this is combined
together and executed, you can run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;ctx.getEnvironment().getProperty(&apos;service.host.url&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to resolve a property placeholder value retrieved from a YAML configuration file in your &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script!&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Spring Application Context and Groovy Scripts</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/12/16/spring_context_groovy_script.html</link>
            <pubDate>Tue, 16 Dec 2014 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2014/12/16/spring_context_groovy_script.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like to use &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; to write scripts to help me test parts of my application that require a little more set up than a normal unit test should allow
(think a small-scale integration test).  Often, these scripts take the form of client-based code that establishes a connection to a locally running
instance of my application and verifies that certain operations produce the desired and expected results.  Recently, I found myself in a situation where
I wanted to test some &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt;-based code that uses &lt;a href=&quot;http://www.thymeleaf.org/&quot; target=&quot;_blank&quot;&gt;Thymeleaf&lt;/a&gt; to generate HTML.  I didn&amp;#8217;t necessarily want to extact the code into a separate library just
so I could functionally test it outside of my application.  Instead, I decided to take the project&amp;#8217;s JAR file (as the application is a &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; application)
and use it as a dependency in my &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script.  This meant that I would need to find a way to set up the &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context, so that all of the required
dependency injection would take place.  This turned out to not be that difficult:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;import com.test.ApplicationConfiguration

import org.springframework.context.annotation.AnnotationConfigApplicationContext

...

def activeProfile = &apos;test&apos;

def ctx = new AnnotationConfigApplicationContext()
ctx.getEnvironment().setActiveProfiles(activeProfile)
ctx.register(ApplicationConfiguration)
ctx.refresh()

...

ctx.close()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example above, the script creates an instance of the &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt; &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;Spring Framework&lt;/a&gt; context, sets the active profile, registers my Java-based configuration
class (from my application&amp;#8217;s JAR) and refreshes the context.  At this point, you can reference any and all beans created by the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def bean = ctx.getBean(&apos;myBean&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can obviously use the other variants of the &lt;code&gt;ApplicationContext&lt;/code&gt; interface to configure your context (e.g. XML, etc).  In a future post, I will discuss how to leverage the &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt;
YAML support from a &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; script so that you can leverage your application&amp;#8217;s configuration files when in your script.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Use Inline Attachments as Image Sources in HTML Emails with Spring</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/12/09/email_inline_image_attachments.html</link>
            <pubDate>Tue, 9 Dec 2014 00:00:00 -0800</pubDate>
            <guid isPermaLink="false">2014/12/09/email_inline_image_attachments.html</guid>
            <description>
                    &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are in the need of generating HTML-based e-mails with images, the simple approach is to simply host the image and link to it
in the HTML.  This will work, but will cause the reciepients (in most e-mail clients) to be prompted as to whether or not they should
download and show the image.  If you want to avoid this (and therefore the stigma of a perceived security threat), you can include
the image as an attachment in the e-mail and reference it using the attachment&amp;#8217;s content ID value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;img src=&quot;cid:imageName.png&quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the e-mail client loads the message, it will now resolve the image from the inlined attachments included in the e-mail.  This all
sounds great, but how do you get the images in the e-mail?  The solution is to combine the
&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mail.html&quot; target=&quot;_blank&quot;&gt;Spring JavaMailSender&lt;/a&gt; with the
&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/resources.html&quot; target=&quot;_blank&quot;&gt;Spring Resource interface&lt;/a&gt; to
load and store the image data in the generated e-mail.  The first step is to load the images as &lt;code&gt;Resource&lt;/code&gt; objects, either from the
file system or classpath (in this example, we will use the classpath):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.apache.commons.io.IOUtils;

import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.InputStreamSource;

...

InputStreamSource imageSource = new ByteArrayResource(IOUtils.toByteArray(getClass().getResourceAsStream(&quot;/images/logo.png&quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code snippet above uses the &lt;a href=&quot;http://commons.apache.org/proper/commons-io/&quot; target=&quot;&quot;_blank&apos;&quot;&gt;Apache Commons IO library&lt;/a&gt; to convert
the image bytes (read from the classpath via the &lt;code&gt;getResourceAsStream()&lt;/code&gt; method) into a byte array.  The byte array is then wrapped
by the Spring &lt;code&gt;ByteArrayResource&lt;/code&gt;, which we will use to create the inline attachment (we could also use the &lt;code&gt;ClassPathResource&lt;/code&gt;).  The next
step is to add the image to the MIME message as an attachment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import javax.mail.internet.MimeMessage;

import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;

...

JavaMailSender mailSender = new JavaMailSenderImpl();  // Or use Spring IoC to inject a pre-configured JavaMailSenderImpl
MimeMessage mimeMessage = mailSender.createMimeMessage();
MimeMessageHelper message = new MimeMessageHelper(mimeMessage, true, &quot;UTF-8&quot;);

// Add information to the message, such as subject, recipients, etc

message.addInline(&quot;logo.png&quot;, imageSource);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;addInline()&lt;/code&gt; method of the &lt;code&gt;MimeMessageHelper&lt;/code&gt; reads the byte data from the &lt;code&gt;InputStreamSource&lt;/code&gt; and creates the inline MIME body part to hold the
attachment.  It also sets the content ID to the name provided by the first parameter.  Now, all that&amp;#8217;s left is to reference the image in our HTML body:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;message.setText(&quot;&amp;lt;img src=\&quot;cid:logo.png\&quot;&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;div&amp;gt;My logo&amp;lt;/div&amp;gt;&quot;, true);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when the e-mail is viewed in the reciepient&amp;#8217;s e-mail client, the image will be displayed from the attachments.  Note that this works with most web mail clients, however,
you should only attach images that are referenced by the HTML body, otherwise they may show up as actual attachments in the e-mail client.&lt;/p&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
