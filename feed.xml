<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Flowers Are Still Standing</title>
        <link>http://jdpgrailsdev.github.io/blog/</link>
        <atom:link href="http://jdpgrailsdev.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
        <description>Jonathan Pearlin's Blog</description>
        <language>en-us</language>
        <pubDate>Mon, 16 Jun 2014 09:55:55 -0400</pubDate>
        <lastBuildDate>Mon, 16 Jun 2014 09:55:55 -0400</lastBuildDate>
        <image>
            <url>http://jdpgrailsdev.github.io/blog//img/robot_devil.png</url>
            <title>Jonathan Pearlin's Blog</title>
            <link>http://jdpgrailsdev.github.io/blog/</link>
        </image>
        <item>
            <title>A Tomcat Rolling File Appender with Logback</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/06/17/logback_tomcat_rolling_appender.html</link>
            <pubDate>Tue, 17 Jun 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/06/17/logback_tomcat_rolling_appender.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, I needed to add a &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration to an application that is deployed in &lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Tomcat&lt;/a&gt;.  I wanted to
ensure that my log files did not grow in an unbounded manner.  To protect against this, I decided to use the &lt;code&gt;RollingFileAppender&lt;/code&gt; provided by &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt;.  That is an
obvious choice to solve this problem, but I wanted to ensure that when running the application in &lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Tomcat&lt;/a&gt;, the generated
log files end up in &lt;code&gt;${catalina.base}/logs&lt;/code&gt; and when running locally via something like the &lt;a href=&quot;http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/&quot; target=&quot;_blank&quot;&gt;Maven Apache Tomcat Plugin&lt;/a&gt;
it chose an appropriate output directory.  I arrive at the following &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt;-based &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;logback.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;import static ch.qos.logback.classic.Level.INFO

import ch.qos.logback.classic.encoder.PatternLayoutEncoder
import ch.qos.logback.core.rolling.FixedWindowRollingPolicy
import ch.qos.logback.core.rolling.RollingFileAppender
import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy
import ch.qos.logback.core.status.OnConsoleStatusListener

// Print out the Logback configuration information at startup.
statusListener OnConsoleStatusListener

def BASE_DIR = System.getProperty(&apos;catalina.base&apos;) ?: System.getProperty(&apos;user.dir&apos;)	&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

appender(&quot;WEBAPP&quot;, RollingFileAppender) {
    file = &quot;${BASE_DIR}/logs/application.log&quot;
    encoder(PatternLayoutEncoder) {
        pattern = &quot;%-50(%date{ISO8601} [%thread]) %-5level %logger{50} - %msg%n%rEx&quot;
    }
    triggeringPolicy(SizeBasedTriggeringPolicy) {
        maxFileSize = &apos;10MB&apos;
    }
    rollingPolicy(FixedWindowRollingPolicy) {
        fileNamePattern = &quot;${BASE_DIR}/logs/application-%d{yyyyMMdd_hhmmss}.%i.gz&quot;
        maxIndex = 10
    }
}

root(INFO, [&quot;WEBAPP&quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the &lt;code&gt;catalina.base&lt;/code&gt; property is present and not blank, use it.  Otherwise, use the current user&amp;#8217;s directory as the base for the log file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration above ensures that not only will the log files be rotated based on size, but that the files will be created in the appropriate location based
on the inspection of the &lt;code&gt;catalina.base&lt;/code&gt; and &lt;code&gt;user.dir&lt;/code&gt; system properties.  Because the configuration is written in &lt;a href=&quot;http://groovy.codehaus.org/&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt;, we can
use any sort of logic we want to manipulate the &lt;a href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;Logback&lt;/a&gt; configuration at runtime to ensure the proper setup for the logging infrastructure in our application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails and stacktrace.log</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/06/10/grails_stracetrace_log.html</link>
            <pubDate>Tue, 10 Jun 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/06/10/grails_stracetrace_log.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Out of the box, the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; framework programmatically configures a file-based logging appender that produces a log file named &lt;code&gt;stacktrace.log&lt;/code&gt;.  This log contains any errors generated by the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; application.  One of its problems
is that this appender does not use a rolling file appender and therefore can grow without bound.  Typically, I configure my own applications to use a rolling file appender
which makes the &lt;code&gt;stacktrace.log&lt;/code&gt; file superfluous, as all errors are also logged to my custom appender.  You can remove this appender at runtime by adding some magic to your application&amp;#8217;s &lt;code&gt;grails-app/conf/Bootstrap.groovy&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Boostrap.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;import org.slf4j.LoggerFactory

import ch.qos.logback.classic.LoggerContext
import ch.qos.logback.core.util.StatusPrinter

class BootStrap {

    def init = { servletContext -&amp;gt;
        // Remove the Grails stack trace log appender, as it does not use a rolling appender.
        removeStackTraceLogAppender()
    }

    def destroy = {
    }

    /**
     * Removes the &apos;stacktraceLog&apos; appender added by Grails.  This appender does NOT use a
     * rolling file appender and can grow to astronomical sizes if left unattended.  Removing
     * this log file does not remove any data, as the errors logged to it also get logged
     * to the console appender.
     */
    private def removeStackTraceLogAppender() {
        def logger = LoggerFactory.getLogger(&apos;StackTrace&apos;)
        if(logger) {
            def stackTraceAppender = logger.getAppender(&apos;stacktraceLog&apos;)
            if(stackTraceAppender) {
                if(logger.detachAppender(stackTraceAppender)) {
                    println &quot;Grails &apos;stacktraceLog&apos; log appender removed from configuration.&quot;
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code above asks the &lt;a href=&quot;http://www.slf4j.org/&quot; target=&quot;blank&quot;&gt;SLF4J&lt;/a&gt; API for the &lt;code&gt;StackTrace&lt;/code&gt; logger, which is created programmatically by the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; framework.  From that logger, the &lt;code&gt;stacktraceLog&lt;/code&gt; appender
is retrieved and detached, to ensure that any information sent to the &lt;code&gt;StackTrace&lt;/code&gt; logger does not get appended to the &lt;code&gt;stacktrace.log&lt;/code&gt; file.  This helps to prevent this log file from growing in an unbounded manner.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Spring Boot, Jersey and Lazy Initialization</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/06/03/spring_boot_jersey_2.html</link>
            <pubDate>Tue, 3 Jun 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/06/03/spring_boot_jersey_2.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is pretty simple to spin up a micro REST service using &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot; target=&quot;_blank&quot;&gt;Spring Boot&lt;/a&gt; and &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt;.  In fact, there are various tutorials out there that show how this can be done with very little code/configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dsyer/spring-boot-jersey&quot; target=&quot;_blank&quot;&gt;Spring Boot Jersey module&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://geowarin.github.io/spring-boot/jersey/2014/01/31/a-simple-spring-boot-and-jersey-application.html&quot; target=&quot;_blank&quot;&gt;A Simple Spring Boot and Jersey Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt; also provides a nice &lt;a href=&quot;https://jersey.java.net/documentation/latest/spring.html&quot; target=&quot;_blank&quot;&gt;Spring support module&lt;/a&gt;, which makes it easy to register &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt; resources as Spring components.  The first step
is to create a Spring-based &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt; resource configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;JerseyConfig.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.server.spring.SpringComponentProvider;
import org.glassfish.jersey.server.spring.scope.RequestContextFilter;
import org.springframework.stereotype.Component;

@Component
public class JerseyConfig extends ResourceConfig {

    public JerseyConfig() {
        register(MyResource.class);
        register(RequestContextFilter.class);
        register(LoggingFilter.class);
        register(SpringComponentProvider.class);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have the configuration created (and Spring set up to component scan it at startup up), you also need to create a servlet to register the configuration with &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ApplicationConfig.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;import java.io.IOException;

import org.glassfish.jersey.servlet.ServletContainer;
import org.glassfish.jersey.servlet.ServletProperties;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan({&quot;com.test&quot;})
public class ApplicationConfig {

    @Bean
    public ServletRegistrationBean jerseyServlet() {
        final ServletRegistrationBean registration = new ServletRegistrationBean(new ServletContainer(), &quot;/api/*&quot;);
        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());
        return registration;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is pretty simple, but when you start up the application and then make a call to your REST resource, you may notice that &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt; is not initialized until this first call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;2014-05-19 12:08:30.062  INFO 8626 --- [lication.main()] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080/http
2014-05-19 12:08:30.065  INFO 8626 --- [lication.main()] com.test.Application        		      : Started Application in 13.461 seconds (JVM running for 21.588)
2014-05-19 12:10:29.363  INFO 8626 --- [lication.main()] o.g.jersey.server.ApplicationHandler     : Initiating Jersey application, version Jersey: 2.7 2014-03-12 18:11:31...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that the first request to your service incurs the cost of initializing &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt;.  Luckily, there is a simple fix that will ensure that &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt; is initialized on startup.  We can add
a call to the &lt;code&gt;setLoadOnStartup()&lt;/code&gt; method of the &lt;code&gt;ServletRegistration&lt;/code&gt; instance in our Spring configuration to ensure that &lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey 2.x&lt;/a&gt; is initialized upon application start up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ApplicationConfig.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;import java.io.IOException;

import org.glassfish.jersey.servlet.ServletContainer;
import org.glassfish.jersey.servlet.ServletProperties;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan({&quot;com.test&quot;})
public class ApplicationConfig {

    @Bean
    public ServletRegistrationBean jerseyServlet() {
        final ServletRegistrationBean registration = new ServletRegistrationBean(new ServletContainer(), &quot;/api/*&quot;);
        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());
        registration.setLoadOnStartup(1);
        return registration;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the change above, the Jersey application is initialized prior to application start:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;2014-05-19 12:10:29.363  INFO 8626 --- [lication.main()] o.g.jersey.server.ApplicationHandler     : Initiating Jersey application, version Jersey: 2.7 2014-03-12 18:11:31...
2014-05-19 12:10:30.062  INFO 8626 --- [lication.main()] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080/http
2014-05-19 12:10:30.065  INFO 8626 --- [lication.main()] com.test.Application        		      : Started Application in 13.461 seconds (JVM running for 21.588)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails, Maven and JDK-based Profile Activation</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/05/27/grails_maven_jdk_profile.html</link>
            <pubDate>Tue, 27 May 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/05/27/grails_maven_jdk_profile.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, I have been spending my time converting &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; applications to use &lt;a href=&quot;http://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt; POM files for dependency management.  For the last couple releases, &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; has included the ability to
rely on a POM file for dependencies, instead of declaring the repositories and dependencies directly in your &lt;code&gt;grails-app/conf/BuildConfig.groovy&lt;/code&gt;.  This works exactly as expected&amp;#8201;&amp;#8212;&amp;#8201;that is &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt;
retrieves the dependency declarations from the POM file and uses them to build/run the application when using the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; CLI.  However, there is a bug in the way &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; dynamically validates and
uses the POM file.  I came across this issue when attempting to use the JDK version-based profile activation that I discussed in &lt;a href=&quot;http://jonathanpearlin.com/blog/2014/04/03/maven_java8_javadoc.html&quot; target=&quot;_blank&quot;&gt;a previous post&lt;/a&gt;.
When a JDK-activated profile is present in the POM file used by &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt;, the application will report the following error:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;[ERROR] Failed to determine Java version for profile java8 @ &amp;lt;GAV of the POM file containing the profile&amp;gt;
        at org.apache.maven.model.building.DefaultModelProblemCollector.newModelBuildingException(DefaultModelProblemCollector.java:195)
        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:416)
        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:368)
        at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:359)
        at grails.util.BuildSettings.doResolve(BuildSettings.groovy:513)
        at grails.util.BuildSettings.doResolve(BuildSettings.groovy)
        at grails.util.BuildSettings$_getDefaultBuildDependencies_closure17.doCall(BuildSettings.groovy:774)
        at grails.util.BuildSettings$_getDefaultBuildDependencies_closure17.doCall(BuildSettings.groovy)
        at grails.util.BuildSettings.getDefaultBuildDependencies(BuildSettings.groovy:768)
        at grails.util.BuildSettings.getBuildDependencies(BuildSettings.groovy:673)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, I was confused.  This same error does not happen if you use the &lt;a href=&quot;https://github.com/grails/grails-maven&quot; target=&quot;_blank&quot;&gt;Grails Maven Plugin&lt;/a&gt; to build/run your application&amp;#8201;&amp;#8212;&amp;#8201;it only happens when using the
&lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; CLI.  I also know that &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; &amp;#8656; 2.3.X does not support Java 8, so maybe it was related to that?  After looking at the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; source (and the stacktrace), I found some interesting code in the
&lt;a href=&quot;https://github.com/apache/maven/blob/maven-3.1.1/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java&quot; target=&quot;_blank&quot;&gt;JdkVersionProfileActivator&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;String version = context.getSystemProperties().get( &quot;java.version&quot; );

if ( version == null || version.length() &amp;lt;= 0 )
{
    problems.add( new ModelProblemCollectorRequest( Severity.ERROR, Version.BASE )
            .setMessage( &quot;Failed to determine Java version for profile &quot; + profile.getId() )
            .setLocation( activation.getLocation( &quot;jdk&quot; ) ) );
    return false;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt; code checks the &lt;code&gt;java.version&lt;/code&gt; system property to determine which version of the JDK is in use to see if it matches up with the requested profile.  After some additional digging in the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; source, I discovered that the
&lt;a href=&quot;https://github.com/grails/grails-core/blob/master/grails-aether/src/main/groovy/org/codehaus/groovy/grails/resolve/maven/aether/AetherDependencyManager.groovy&quot; target=&quot;_blank&quot;&gt;AetherDependencyManager&lt;/a&gt; programmatically builds a
&lt;a href=&quot;http://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt; &lt;code&gt;DefaultModelBuildingRequest&lt;/code&gt;, but does &lt;strong&gt;not&lt;/strong&gt; pass the system properties from the JVM to the request.  Therefore, when the &lt;code&gt;JdkVersionProfileActivator&lt;/code&gt; attempts to look at the value of the &lt;code&gt;java.version&lt;/code&gt; system property, there
are no properties to inspect!  I made a quick change to the &lt;code&gt;AetherDependencyManager&lt;/code&gt; class to add the setting of the system properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;final modelRequest = new DefaultModelBuildingRequest()
modelRequest.setPomFile(pomFile)
modelRequest.setSystemProperties(System.properties)
modelRequest.setModelResolver(new GrailsModelResolver(repositorySystem, session, repositories))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After re-testing with the modified code, the &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; happily accepted the JDK-based &lt;a href=&quot;http://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt; profile without exception.  I have created a &lt;a href=&quot;https://github.com/grails/grails-core/pull/492&quot; target=&quot;_blank&quot;&gt;pull request&lt;/a&gt;, which has been merged into the
2.4.x version of &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt;.  If you need access to this fix earlier, I would suggest creating a branch off of the tagged version of &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; that you are currently using and cherry-picking the commit that contains the change.  You can then build
the &lt;code&gt;grails-aether&lt;/code&gt; JAR and drop it into the &lt;code&gt;dist&lt;/code&gt; folder of your &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; installation to consume the change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
        <item>
            <title>Grails, Maven, Cobertura and Java 7</title>
            <link>http://jdpgrailsdev.github.io/blog/2014/05/20/grails_maven_coverage.html</link>
            <pubDate>Tue, 20 May 2014 00:00:00 -0400</pubDate>
            <guid isPermaLink="false">2014/05/20/grails_maven_coverage.html</guid>
            <description>
                    &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When working on upgrading a few &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; plugins to 2.3.x and converting them to be built using the &lt;a href=&quot;http://grails.org/doc/latest/guide/commandLine.html#4.5%20Ant%20and%20Maven&quot; target=&quot;_blank&quot;&gt;Grails Maven Plugin&lt;/a&gt;, I ran into a weird issue when
executing unit tests with the &lt;a href=&quot;https://github.com/beckje01/grails-code-coverage&quot; target=&quot;_blank&quot;&gt;Grails Code Coverage Plugin&lt;/a&gt; installed and enabled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Error |
Compilation error compiling [unit] tests: Expecting a stackmap frame at branch target 97
Exception Details:
  Location:
    com/test/compiler/injection/DeletableASTTransformation.visit([Lorg/codehaus/groovy/ast/ASTNode;Lorg/codehaus/groovy/control/SourceUnit;)V @62: ifeq
  Reason:
    Expected stackmap frame at this location.
  Bytecode:
    0000000: 033e 11ff ff36 0412 1e11 0023 b800 242b
    0000010: 0432 c000 343a 0512 1e11 0024 b800 242b
    0000020: 0332 c000 363a 0612 1e11 0025 b800 242b
    0000030: 0332 c100 3611 0025 3e11 0000 3604 9900
    0000040: 2312 1e1d 1504 04b8 003a 11ff ff36 042b
    0000050: 0432 c100 3411 0025 3e11 0001 3604 9a00
    0000060: 481d 1100 25a0 001c 1504 1100 01a0 0014
    0000070: 121e 1d15 0404 b800 3a11 ffff 3604 a700
    0000080: 1615 049b 0011 121e 1d15 0403 b800 3a11
    0000090: ffff 3604 121e 1100 26b8 0024 bb00 3c59
    00000a0: 123e b700 41bf 1504 9b00 1112 1e1d 1504
    00000b0: 03b8 003a 11ff ff36 0412 1e11 0029 b800
    00000c0: 24b2 0043 1906 b600 47b6 004d 1100 293e
    00000d0: 1100 0036 049a 0012 121e 1d15 0404 b800
    00000e0: 3a11 ffff 3604 b115 049b 0011 121e 1d15
    00000f0: 0403 b800 3a11 ffff 3604 121e 1100 2bb8
    0000100: 0024 1905 c100 4f11 002b 3e11 0000 3604
    0000110: 9900 ea1d 1100 2ba0 0019 1504 1100 00a0
    0000120: 0011 121e 1d15 0404 b800 3a11 ffff 3604
    0000130: 121e 1100 2cb8 0024 1905 c000 4f3a 0712
    0000140: 1e11 002d b800 2419 07b6 0052 1254 b800
    0000150: 5a11 002d 3e11 0000 3604 9900 331d 1100
    0000160: 2da0 0019 1504 1100 00a0 0011 121e 1d15
    0000170: 0404 b800 3a11 ffff 3604 121e 1100 2eb8
    0000180: 0024 2a19 0719 06b7 005e a700 6515 049b
    0000190: 0011 121e 1d15 0403 b800 3a11 ffff 3604
    00001a0: 121e 1100 30b8 0024 bb00 3c59 bb00 6059
    00001b0: b700 6112 63b6 0067 1905 b600 6ab6 006d
    00001c0: 126f b600 67b2 0071 b600 6712 73b6 0067
    00001d0: 1907 121e 1100 31b8 0024 b600 52b6 0077
    00001e0: b600 6712 79b6 0067 b600 7cb7 0041 bf12
    00001f0: 1e11 0033 b800 24a7 005d 1504 9b00 1112
    0000200: 1e1d 1504 03b8 003a 11ff ff36 0412 1e11
    0000210: 0034 b800 24bb 003c 59bb 0060 59b7 0061
    0000220: 1263 b600 6719 05b6 006a b600 6d12 6fb6
    0000230: 0067 b200 71b6 0067 127e b600 6719 0512
    0000240: 1e11 0035 b800 24b6 0082 b600 6db6 007c
    0000250: b700 41bf 121e 1100 37b8 0024 b1
  Stackmap Table:
    append_frame(@156,Object[#52],Object[#54])
    same_frame(@193)
    same_frame_extended(@258)
    append_frame(@424,Object[#79])
    chop_frame(@503,1)
    same_frame(@533)
    same_frame_extended(@604)

    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
    at _GrailsTest$_run_closure1.doCall(_GrailsTest.groovy:102)
    at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy:185)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy)
    at org.codehaus.gant.GantBinding.withTargetEvent(GantBinding.groovy:90)
    at org.codehaus.gant.GantBinding.this$4$withTargetEvent(GantBinding.groovy)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy:185)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy)
    at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
    at TestApp$_run_closure1.doCall(TestApp.groovy:32)
    at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy:185)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy)
    at org.codehaus.gant.GantBinding.withTargetEvent(GantBinding.groovy:90)
    at org.codehaus.gant.GantBinding.this$4$withTargetEvent(GantBinding.groovy)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy:185)
    at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy)
    at gant.Gant$_dispatch_closure5.doCall(Gant.groovy:381)
    at gant.Gant$_dispatch_closure7.doCall(Gant.groovy:415)
    at gant.Gant$_dispatch_closure7.doCall(Gant.groovy)
    at gant.Gant.withBuildListeners(Gant.groovy:427)
    at gant.Gant.this$2$withBuildListeners(Gant.groovy)
    at gant.Gant$this$2$withBuildListeners.callCurrent(Unknown Source)
    at gant.Gant.dispatch(Gant.groovy:415)
    at gant.Gant.this$2$dispatch(Gant.groovy)
    at gant.Gant.invokeMethod(Gant.groovy)
    at gant.Gant.executeTargets(Gant.groovy:591)
    at gant.Gant.executeTargets(Gant.groovy:590)
    at org.grails.launcher.GrailsLauncher.launch(GrailsLauncher.java:144)
    at org.grails.maven.plugin.tools.ForkedGrailsRuntime.main(ForkedGrailsRuntime.java:168)

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 59.895 s
[INFO] Finished at: 2014-05-05T07:49:39-05:00
[INFO] Final Memory: 17M/75M&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I should point out that the same exact unit tests (without any modifications) passed, even with instrumentation for the code coverage calculation, prior to upgrading from &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; 2.0.x to 2.3.x.  Could this be one of those subtle
&lt;a href=&quot;http://groovy.codehaus.org&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; low-level changes that causes code that once ran fine to all of a sudden be incorrect?  After doing some searching on the internets, I discovered that Java 7 introduced much stricter verification than previous Java versions.
As I was using Java 7 with &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; 2.0.x, my guess is that something in the underlying &lt;a href=&quot;http://groovy.codehaus.org&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; code in the updated version of &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; does not contain a valid stack map (in Java 7&amp;#8217;s eyes) for the method(s) in question.  Luckily, the verifier can be
disabled until the issue is resolved by the framework.  The &lt;code&gt;-Xverify:none&lt;/code&gt; JVM argument can be used to tell the Java 7 verifier not to do its thing.  In order to tell the &lt;a href=&quot;http://grails.org/doc/latest/guide/commandLine.html#4.5%20Ant%20and%20Maven&quot; target=&quot;_blank&quot;&gt;Grails Maven Plugin&lt;/a&gt;
to pass this JVM argument to the forked &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt; process, I had to make the following tweak to my Maven POM file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint xml language-xml&quot;&gt;&lt;code&gt;    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.grails&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;grails-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${grails.version}&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;fork&amp;gt;true&amp;lt;/fork&amp;gt;
                    &amp;lt;forkedVmArgs&amp;gt;
                        &amp;lt;!-- Disable verifier to avoid issues with Java 7 verifier and code
                            instrumentation --&amp;gt;
                        &amp;lt;forkedVmArg&amp;gt;-Xverify:none&amp;lt;/forkedVmArg&amp;gt;
                    &amp;lt;/forkedVmArgs&amp;gt;
                    &amp;lt;nonInteractive&amp;gt;true&amp;lt;/nonInteractive&amp;gt;
                    &amp;lt;showStacktrace&amp;gt;true&amp;lt;/showStacktrace&amp;gt;
                    &amp;lt;pluginsDir&amp;gt;${project.build.directory}/plugins&amp;lt;/pluginsDir&amp;gt;
                &amp;lt;/configuration&amp;gt;
                &amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After add the argument and re-running the tests, everything passed as expected.  I am still not sure if the problem lies with &lt;a href=&quot;http://grails.org&quot; target=&quot;_blank&quot;&gt;Grails&lt;/a&gt;, &lt;a href=&quot;http://groovy.codehaus.org&quot; target=&quot;_blank&quot;&gt;Groovy&lt;/a&gt; or the instrumentation provided by the &lt;a href=&quot;https://github.com/beckje01/grails-code-coverage&quot; target=&quot;_blank&quot;&gt;Grails Code Coverage Plugin&lt;/a&gt; or
some combination of all of those.  I will continue to keep an eye out for updates that appear to affect this issue in the hopes that the verifier can be re-enabled in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
        </item>
    </channel>
</rss>
